GAS LISTING /tmp/ccWUainM.s 			page 1


   1              		.file	"InterruptRoutine.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN9ThreadABI10popSppSpieEv
   9              	_ZN9ThreadABI10popSppSpieEv:
  10              	.LFB41:
  11              		.file 1 "src/InterruptRoutine.cpp"
   1:src/InterruptRoutine.cpp **** 
   2:src/InterruptRoutine.cpp **** #include "../h/MemoryAllocator.hpp"
   3:src/InterruptRoutine.cpp **** #include "../lib/console.h"
   4:src/InterruptRoutine.cpp **** #include "../h/ThreadABI.hpp"
   5:src/InterruptRoutine.cpp **** #include "../h/SemaphoreABI.hpp"
   6:src/InterruptRoutine.cpp **** #include "../h/BufferPrinting.hpp"
   7:src/InterruptRoutine.cpp **** #include "../test/printing.hpp"
   8:src/InterruptRoutine.cpp **** //ovo treba za prekidna rutina yield da nasilno izadje iz prekidne rutine kad se prvi put nitr pozi
   9:src/InterruptRoutine.cpp **** void ThreadABI::popSppSpie()     {
  12              		.loc 1 9 34
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  10:src/InterruptRoutine.cpp ****     __asm__ volatile ("csrw sepc, ra" );
  20              		.loc 1 10 5
  21              		.loc 1 10 40 is_stmt 0
  22              	#APP
  23              	# 10 "src/InterruptRoutine.cpp" 1
  11              	    __asm__ volatile("csrc sip,0x02");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 11 5 is_stmt 1
  27              		.loc 1 11 38 is_stmt 0
  28              	# 11 "src/InterruptRoutine.cpp" 1
  12              	    __asm__ volatile ("sret");
  29              		csrc sip,0x02
  30              	# 0 "" 2
  31              		.loc 1 12 5 is_stmt 1
  32              		.loc 1 12 30 is_stmt 0
  33              	# 12 "src/InterruptRoutine.cpp" 1
  13              	}
  34              		sret
  35              	# 0 "" 2
  36              		.loc 1 13 1
  37              	#NO_APP
  38 0018 03348100 		ld	s0,8(sp)
  39              		.cfi_restore 8
  40              		.cfi_def_cfa 2, 16
  41 001c 13010101 		addi	sp,sp,16
  42              		.cfi_def_cfa_offset 0
  43 0020 67800000 		jr	ra
  44              		.cfi_endproc
  45              	.LFE41:
GAS LISTING /tmp/ccWUainM.s 			page 2


  47              		.align	2
  48              		.globl	handleSupervisorTrap
  50              	handleSupervisorTrap:
  51              	.LFB42:
  14:src/InterruptRoutine.cpp **** 
  15:src/InterruptRoutine.cpp **** extern "C" void handleSupervisorTrap(){
  52              		.loc 1 15 39 is_stmt 1
  53              		.cfi_startproc
  54 0024 130101F8 		addi	sp,sp,-128
  55              		.cfi_def_cfa_offset 128
  56 0028 233C1106 		sd	ra,120(sp)
  57 002c 23388106 		sd	s0,112(sp)
  58 0030 23349106 		sd	s1,104(sp)
  59 0034 23302107 		sd	s2,96(sp)
  60 0038 233C3105 		sd	s3,88(sp)
  61 003c 23384105 		sd	s4,80(sp)
  62 0040 23345105 		sd	s5,72(sp)
  63              		.cfi_offset 1, -8
  64              		.cfi_offset 8, -16
  65              		.cfi_offset 9, -24
  66              		.cfi_offset 18, -32
  67              		.cfi_offset 19, -40
  68              		.cfi_offset 20, -48
  69              		.cfi_offset 21, -56
  70 0044 13040108 		addi	s0,sp,128
  71              		.cfi_def_cfa 8, 0
  16:src/InterruptRoutine.cpp ****     // Array of arguments
  17:src/InterruptRoutine.cpp ****     uint64 A[8];
  72              		.loc 1 17 5
  18:src/InterruptRoutine.cpp ****     {
  73              		.loc 1 18 5
  19:src/InterruptRoutine.cpp ****         asm volatile("sd a0, %0" : "=m"(A[0]));
  74              		.loc 1 19 9
  75              		.loc 1 19 47 is_stmt 0
  76              	#APP
  77              	# 19 "src/InterruptRoutine.cpp" 1
  20              	        asm volatile("sd a1, %0" : "=m"(A[1]));
  78              		sd a0, -128(s0)
  79              	# 0 "" 2
  80              		.loc 1 20 9 is_stmt 1
  81              		.loc 1 20 47 is_stmt 0
  82              	# 20 "src/InterruptRoutine.cpp" 1
  21              	        asm volatile("sd a2, %0" : "=m"(A[2]));
  83              		sd a1, -120(s0)
  84              	# 0 "" 2
  85              		.loc 1 21 9 is_stmt 1
  86              		.loc 1 21 47 is_stmt 0
  87              	# 21 "src/InterruptRoutine.cpp" 1
  22              	        asm volatile("sd a3, %0" : "=m"(A[3]));
  88              		sd a2, -112(s0)
  89              	# 0 "" 2
  90              		.loc 1 22 9 is_stmt 1
  91              		.loc 1 22 47 is_stmt 0
  92              	# 22 "src/InterruptRoutine.cpp" 1
  23              	        asm volatile("sd a4, %0" : "=m"(A[4]));
  93              		sd a3, -104(s0)
  94              	# 0 "" 2
GAS LISTING /tmp/ccWUainM.s 			page 3


  95              		.loc 1 23 9 is_stmt 1
  96              		.loc 1 23 47 is_stmt 0
  97              	# 23 "src/InterruptRoutine.cpp" 1
  24              	        asm volatile("sd a5, %0" : "=m"(A[5]));
  98              		sd a4, -96(s0)
  99              	# 0 "" 2
 100              		.loc 1 24 9 is_stmt 1
 101              		.loc 1 24 47 is_stmt 0
 102              	# 24 "src/InterruptRoutine.cpp" 1
  25              	        asm volatile("sd a6, %0" : "=m"(A[6]));
 103              		sd a5, -88(s0)
 104              	# 0 "" 2
 105              		.loc 1 25 9 is_stmt 1
 106              		.loc 1 25 47 is_stmt 0
 107              	# 25 "src/InterruptRoutine.cpp" 1
  26              	        asm volatile("sd a7, %0" : "=m"(A[7]));
 108              		sd a6, -80(s0)
 109              	# 0 "" 2
 110              		.loc 1 26 9 is_stmt 1
 111              		.loc 1 26 47 is_stmt 0
 112              	# 26 "src/InterruptRoutine.cpp" 1
  27              	    }
  28:src/InterruptRoutine.cpp ****     uint64* a = A;
 113              		sd a7, -72(s0)
 114              	# 0 "" 2
 115              		.loc 1 28 5 is_stmt 1
 116              	.LVL0:
  29:src/InterruptRoutine.cpp ****     //poseban reg za cuvanje sp da umetnem a0
  30:src/InterruptRoutine.cpp ****     void* retsp;
 117              		.loc 1 30 5
  31:src/InterruptRoutine.cpp ****     asm volatile("csrr %0, sscratch" : "=r"(retsp));
 118              		.loc 1 31 5
 119              		.loc 1 31 52 is_stmt 0
 120              	# 31 "src/InterruptRoutine.cpp" 1
  32              	    //uzimam pc
 121              		csrr s3, sscratch
 122              	# 0 "" 2
 123              	.LVL1:
  33:src/InterruptRoutine.cpp ****     unsigned long int incrementedpc;
 124              		.loc 1 33 5 is_stmt 1
  34:src/InterruptRoutine.cpp ****     __asm__ volatile("csrr %0,sepc": "=r" (incrementedpc));
 125              		.loc 1 34 5
 126              		.loc 1 34 59 is_stmt 0
 127              	# 34 "src/InterruptRoutine.cpp" 1
  35              	    //uzmi scause
 128              		csrr s2,sepc
 129              	# 0 "" 2
 130              	.LVL2:
  36:src/InterruptRoutine.cpp ****     uint64 causevalue;
 131              		.loc 1 36 5 is_stmt 1
  37:src/InterruptRoutine.cpp ****     uint8 a0val=a[0];
 132              		.loc 1 37 5
 133              		.loc 1 37 11 is_stmt 0
 134              	#NO_APP
 135 0070 834404F8 		lbu	s1,-128(s0)
 136              	.LVL3:
  38:src/InterruptRoutine.cpp ****     __asm__ volatile("csrr %0,scause" : "=r" (causevalue) );
GAS LISTING /tmp/ccWUainM.s 			page 4


 137              		.loc 1 38 5 is_stmt 1
 138              		.loc 1 38 60 is_stmt 0
 139              	#APP
 140              	# 38 "src/InterruptRoutine.cpp" 1
  39              	    // ako je ecall
 141              		csrr a4,scause
 142              	# 0 "" 2
 143              	.LVL4:
  40:src/InterruptRoutine.cpp ****     if(causevalue==(0x09UL) ||causevalue==(0x08UL)){
 144              		.loc 1 40 5 is_stmt 1
 145              	#NO_APP
 146              	.LBB44:
 147              		.loc 1 40 29 is_stmt 0
 148 0078 930687FF 		addi	a3,a4,-8
 149              		.loc 1 40 5
 150 007c 93071000 		li	a5,1
 151 0080 63F4D704 		bleu	a3,a5,.L31
 152              	.LBE44:
  41:src/InterruptRoutine.cpp **** 
  42:src/InterruptRoutine.cpp ****         //provjera dali je mem_alloc
  43:src/InterruptRoutine.cpp ****         if(a0val==(0x01)){
  44:src/InterruptRoutine.cpp ****             //mem_alloc
  45:src/InterruptRoutine.cpp ****             size_t bytes=a[1];
  46:src/InterruptRoutine.cpp **** 
  47:src/InterruptRoutine.cpp **** 
  48:src/InterruptRoutine.cpp ****             uint64 savesstatus;
  49:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
  50:src/InterruptRoutine.cpp **** 
  51:src/InterruptRoutine.cpp **** 
  52:src/InterruptRoutine.cpp ****             void * retformalloc=MemoryAllocator::getInstance().MemoryAlloc(bytes);
  53:src/InterruptRoutine.cpp **** 
  54:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
  55:src/InterruptRoutine.cpp **** 
  56:src/InterruptRoutine.cpp **** 
  57:src/InterruptRoutine.cpp ****             //force umetanje povratne vrijednosti na stek
  58:src/InterruptRoutine.cpp ****             __asm__ volatile("mv a0, %0" : : "r" ( retformalloc));
  59:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
  60:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
  61:src/InterruptRoutine.cpp ****             incrementedpc+=4;
  62:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
  63:src/InterruptRoutine.cpp **** 
  64:src/InterruptRoutine.cpp **** 
  65:src/InterruptRoutine.cpp ****         }
  66:src/InterruptRoutine.cpp **** 
  67:src/InterruptRoutine.cpp ****         //memory free provjera
  68:src/InterruptRoutine.cpp ****         if(a0val==(0x02)){
  69:src/InterruptRoutine.cpp ****             incrementedpc+=4;
  70:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
  71:src/InterruptRoutine.cpp ****             void* handler= reinterpret_cast<void *>(a[1]);
  72:src/InterruptRoutine.cpp **** 
  73:src/InterruptRoutine.cpp **** 
  74:src/InterruptRoutine.cpp ****             uint64 savesstatus;
  75:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
  76:src/InterruptRoutine.cpp **** 
  77:src/InterruptRoutine.cpp **** 
  78:src/InterruptRoutine.cpp ****             MemoryAllocator::getInstance().MemoryFree(handler);
  79:src/InterruptRoutine.cpp **** 
GAS LISTING /tmp/ccWUainM.s 			page 5


  80:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
  81:src/InterruptRoutine.cpp **** 
  82:src/InterruptRoutine.cpp **** 
  83:src/InterruptRoutine.cpp ****             uint64 returngflag=0x696969;
  84:src/InterruptRoutine.cpp ****             //umetanje ret value u ovom slucaju nije ni potrebno
  85:src/InterruptRoutine.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (returngflag));
  86:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
  87:src/InterruptRoutine.cpp **** 
  88:src/InterruptRoutine.cpp ****         }
  89:src/InterruptRoutine.cpp ****         if(a0val==(0x11)){
  90:src/InterruptRoutine.cpp ****             //threadcreate
  91:src/InterruptRoutine.cpp ****             //pc increment
  92:src/InterruptRoutine.cpp **** 
  93:src/InterruptRoutine.cpp ****             //restore reg
  94:src/InterruptRoutine.cpp ****             void* stack= reinterpret_cast<void *>(a[4]);
  95:src/InterruptRoutine.cpp ****             void* arg= reinterpret_cast<void *>(a[3]);
  96:src/InterruptRoutine.cpp ****             void(*fun)(void*)=reinterpret_cast<void (*)(void *)>(a[2]);
  97:src/InterruptRoutine.cpp ****             ThreadABI **handle= reinterpret_cast<ThreadABI **>(a[1]);
  98:src/InterruptRoutine.cpp **** 
  99:src/InterruptRoutine.cpp **** 
 100:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 101:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 102:src/InterruptRoutine.cpp ****             uint64 returngflag;
 103:src/InterruptRoutine.cpp **** 
 104:src/InterruptRoutine.cpp ****             if(ThreadABI::thread_create(handle,fun,arg,stack)<0){
 105:src/InterruptRoutine.cpp ****                 //greska
 106:src/InterruptRoutine.cpp ****                 returngflag=-1;
 107:src/InterruptRoutine.cpp ****                 //umetanje ret value u ovom slucaju nije ni potrebno
 108:src/InterruptRoutine.cpp ****                 __asm__ volatile("mv a0, %0" : : "r" (returngflag));
 109:src/InterruptRoutine.cpp ****                 __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 110:src/InterruptRoutine.cpp ****             }
 111:src/InterruptRoutine.cpp **** 
 112:src/InterruptRoutine.cpp ****             //sve ok sve naj
 113:src/InterruptRoutine.cpp ****             returngflag=0;
 114:src/InterruptRoutine.cpp ****             //umetanje ret value u ovom slucaju nije ni potrebno
 115:src/InterruptRoutine.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (returngflag));
 116:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 117:src/InterruptRoutine.cpp **** 
 118:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 119:src/InterruptRoutine.cpp **** 
 120:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 121:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 122:src/InterruptRoutine.cpp **** 
 123:src/InterruptRoutine.cpp ****         }
 124:src/InterruptRoutine.cpp ****         if(a0val==(0x12)) {
 125:src/InterruptRoutine.cpp ****             //gasenje niti nasilno
 126:src/InterruptRoutine.cpp ****             //incprement pc
 127:src/InterruptRoutine.cpp ****             ThreadABI::running->setState(ThreadABI::FINISHED);
 128:src/InterruptRoutine.cpp **** 
 129:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 130:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 131:src/InterruptRoutine.cpp **** 
 132:src/InterruptRoutine.cpp ****             ThreadABI::yield();
 133:src/InterruptRoutine.cpp **** 
 134:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 135:src/InterruptRoutine.cpp **** 
 136:src/InterruptRoutine.cpp ****             incrementedpc+=4;
GAS LISTING /tmp/ccWUainM.s 			page 6


 137:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 138:src/InterruptRoutine.cpp **** 
 139:src/InterruptRoutine.cpp ****         }
 140:src/InterruptRoutine.cpp ****         if(a0val==(0x13)) {
 141:src/InterruptRoutine.cpp ****             // ovo je dispatch
 142:src/InterruptRoutine.cpp ****             // mozda treba ali vec imam sacuvan pc  ako bude error odkometarisiii
 143:src/InterruptRoutine.cpp ****             uint64 savedSEPC;
 144:src/InterruptRoutine.cpp ****             asm volatile("csrr %0, sepc" : "=r"(savedSEPC));
 145:src/InterruptRoutine.cpp **** 
 146:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 147:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 148:src/InterruptRoutine.cpp **** 
 149:src/InterruptRoutine.cpp ****             ThreadABI::yield();
 150:src/InterruptRoutine.cpp ****             // mozda treba ali vec imam sacuvan pc  ako bude error odkometarisiii
 151:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 152:src/InterruptRoutine.cpp **** 
 153:src/InterruptRoutine.cpp ****             //increment pc
 154:src/InterruptRoutine.cpp ****             savedSEPC+=4;
 155:src/InterruptRoutine.cpp ****             asm volatile("csrw sepc, %0" : : "r"(savedSEPC));
 156:src/InterruptRoutine.cpp **** 
 157:src/InterruptRoutine.cpp ****         }
 158:src/InterruptRoutine.cpp ****         if(a0val==(0x14)){
 159:src/InterruptRoutine.cpp ****             //custom start za cpp api
 160:src/InterruptRoutine.cpp **** 
 161:src/InterruptRoutine.cpp **** 
 162:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 163:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 164:src/InterruptRoutine.cpp **** 
 165:src/InterruptRoutine.cpp ****             ThreadABI *handle= reinterpret_cast<ThreadABI *>(a[1]);
 166:src/InterruptRoutine.cpp ****             uint64 returngflag;
 167:src/InterruptRoutine.cpp ****             if(handle!= nullptr){
 168:src/InterruptRoutine.cpp ****                 SchedulerABI::getInstanceScheduler().put(handle);
 169:src/InterruptRoutine.cpp ****                 returngflag= 1;
 170:src/InterruptRoutine.cpp **** 
 171:src/InterruptRoutine.cpp ****             }
 172:src/InterruptRoutine.cpp ****             else
 173:src/InterruptRoutine.cpp ****             returngflag= -1;
 174:src/InterruptRoutine.cpp **** 
 175:src/InterruptRoutine.cpp ****             __asm__ volatile("mv a0, %0" : : "r" (returngflag));
 176:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 177:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 178:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 179:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 180:src/InterruptRoutine.cpp **** 
 181:src/InterruptRoutine.cpp ****         }
 182:src/InterruptRoutine.cpp **** 
 183:src/InterruptRoutine.cpp ****         if(a0val==(0x21)) {
 184:src/InterruptRoutine.cpp ****            //semopen
 185:src/InterruptRoutine.cpp ****            SemaphoreABI ** sem= reinterpret_cast<SemaphoreABI **>(a[2]);
 186:src/InterruptRoutine.cpp ****             int val=a[1];
 187:src/InterruptRoutine.cpp **** 
 188:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 189:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 190:src/InterruptRoutine.cpp **** 
 191:src/InterruptRoutine.cpp ****             //otvaranje semafora
 192:src/InterruptRoutine.cpp ****             int retvalfromsem=SemaphoreABI::semopenABI(sem, val);
 193:src/InterruptRoutine.cpp **** 
GAS LISTING /tmp/ccWUainM.s 			page 7


 194:src/InterruptRoutine.cpp **** 
 195:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 196:src/InterruptRoutine.cpp **** 
 197:src/InterruptRoutine.cpp ****             //force umetanje povratne vrijednosti na stek
 198:src/InterruptRoutine.cpp ****             __asm__ volatile("mv a0, %0" : : "r" ( retvalfromsem));
 199:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 200:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 201:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 202:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 203:src/InterruptRoutine.cpp ****         }
 204:src/InterruptRoutine.cpp ****         if(a0val==(0x22)) {
 205:src/InterruptRoutine.cpp ****             //semclose
 206:src/InterruptRoutine.cpp ****             SemaphoreABI * sem= reinterpret_cast<SemaphoreABI *>(a[1]);
 207:src/InterruptRoutine.cpp **** 
 208:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 209:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 210:src/InterruptRoutine.cpp **** 
 211:src/InterruptRoutine.cpp ****             int retvalfromsem=SemaphoreABI::semcloseABI(sem);
 212:src/InterruptRoutine.cpp **** 
 213:src/InterruptRoutine.cpp **** 
 214:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 215:src/InterruptRoutine.cpp **** 
 216:src/InterruptRoutine.cpp ****             //force umetanje povratne vrijednosti na stek
 217:src/InterruptRoutine.cpp ****             __asm__ volatile("mv a0, %0" : : "r" ( retvalfromsem));
 218:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 219:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 220:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 221:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 222:src/InterruptRoutine.cpp **** 
 223:src/InterruptRoutine.cpp **** 
 224:src/InterruptRoutine.cpp ****         }
 225:src/InterruptRoutine.cpp ****         if(a0val==(0x23)) {
 226:src/InterruptRoutine.cpp ****             //semwait
 227:src/InterruptRoutine.cpp ****             SemaphoreABI  *sem= reinterpret_cast<SemaphoreABI *>(a[1]);
 228:src/InterruptRoutine.cpp **** 
 229:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 230:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 231:src/InterruptRoutine.cpp **** 
 232:src/InterruptRoutine.cpp **** 
 233:src/InterruptRoutine.cpp ****             int retvalfromsem=SemaphoreABI::semwaitABI(sem);
 234:src/InterruptRoutine.cpp **** 
 235:src/InterruptRoutine.cpp **** 
 236:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 237:src/InterruptRoutine.cpp **** 
 238:src/InterruptRoutine.cpp ****             //force umetanje povratne vrijednosti na stek
 239:src/InterruptRoutine.cpp ****             __asm__ volatile("mv a0, %0" : : "r" ( retvalfromsem));
 240:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 241:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 242:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 243:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 244:src/InterruptRoutine.cpp **** 
 245:src/InterruptRoutine.cpp **** 
 246:src/InterruptRoutine.cpp **** 
 247:src/InterruptRoutine.cpp ****         }
 248:src/InterruptRoutine.cpp ****         if(a0val==(0x24)) {
 249:src/InterruptRoutine.cpp ****             //semsignal
 250:src/InterruptRoutine.cpp ****             SemaphoreABI * sem= reinterpret_cast<SemaphoreABI *>(a[1]);
GAS LISTING /tmp/ccWUainM.s 			page 8


 251:src/InterruptRoutine.cpp **** 
 252:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 253:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 254:src/InterruptRoutine.cpp **** 
 255:src/InterruptRoutine.cpp ****             uint64 retvalfromsem=SemaphoreABI::semsignalABI(sem);
 256:src/InterruptRoutine.cpp **** 
 257:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 258:src/InterruptRoutine.cpp **** 
 259:src/InterruptRoutine.cpp **** 
 260:src/InterruptRoutine.cpp ****             //force umetanje povratne vrijednosti na stek
 261:src/InterruptRoutine.cpp ****             __asm__ volatile("mv a0, %0" : : "r" ( retvalfromsem));
 262:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 263:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 264:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 265:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 266:src/InterruptRoutine.cpp **** 
 267:src/InterruptRoutine.cpp **** 
 268:src/InterruptRoutine.cpp ****         }
 269:src/InterruptRoutine.cpp ****         if(a0val==(0x31)) {
 270:src/InterruptRoutine.cpp ****             //semsignal
 271:src/InterruptRoutine.cpp ****             time_t time=a[1];
 272:src/InterruptRoutine.cpp **** 
 273:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 274:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 275:src/InterruptRoutine.cpp **** 
 276:src/InterruptRoutine.cpp ****             SchedulerABI::getInstanceScheduler().sleep(time);
 277:src/InterruptRoutine.cpp **** 
 278:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 279:src/InterruptRoutine.cpp **** 
 280:src/InterruptRoutine.cpp **** 
 281:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 282:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 283:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 284:src/InterruptRoutine.cpp **** 
 285:src/InterruptRoutine.cpp **** 
 286:src/InterruptRoutine.cpp ****         }
 287:src/InterruptRoutine.cpp ****         if(a0val==(0x41)) {
 288:src/InterruptRoutine.cpp ****             //getc
 289:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 290:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 291:src/InterruptRoutine.cpp ****             char ret=BufferPrinting::bout->get();
 292:src/InterruptRoutine.cpp ****             __asm__ volatile("mv a0, %0" : : "r" ( ret));
 293:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 294:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 295:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 296:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 297:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 298:src/InterruptRoutine.cpp **** 
 299:src/InterruptRoutine.cpp ****         }
 300:src/InterruptRoutine.cpp ****         if(a0val==(0x42)) {
 301:src/InterruptRoutine.cpp ****             //putc
 302:src/InterruptRoutine.cpp ****             char c =a[1];
 303:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 304:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 305:src/InterruptRoutine.cpp ****             BufferPrinting::bin->put(c);
 306:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 307:src/InterruptRoutine.cpp **** 
GAS LISTING /tmp/ccWUainM.s 			page 9


 308:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 309:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 310:src/InterruptRoutine.cpp **** 
 311:src/InterruptRoutine.cpp ****         }
 312:src/InterruptRoutine.cpp ****         // start user mode
 313:src/InterruptRoutine.cpp ****         if(a0val==0xff)
 314:src/InterruptRoutine.cpp ****         {
 315:src/InterruptRoutine.cpp ****             uint64 temp;
 316:src/InterruptRoutine.cpp ****             asm volatile("csrr %0, sstatus" : "=r" (temp));
 317:src/InterruptRoutine.cpp ****             temp &= ~0x100;
 318:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r" (temp));
 319:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 320:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 321:src/InterruptRoutine.cpp ****         }
 322:src/InterruptRoutine.cpp ****         // start privileged mode
 323:src/InterruptRoutine.cpp ****         if(a0val==0xfe)
 324:src/InterruptRoutine.cpp ****         {
 325:src/InterruptRoutine.cpp ****             uint64 temp;
 326:src/InterruptRoutine.cpp ****             asm volatile("csrr %0, sstatus" : "=r" (temp));
 327:src/InterruptRoutine.cpp ****             temp |= 0x100;
 328:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r" (temp));
 329:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 330:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 331:src/InterruptRoutine.cpp ****         }
 332:src/InterruptRoutine.cpp ****             //custom yield prekidna rutina
 333:src/InterruptRoutine.cpp **** //        if(a0val==(0x69)){
 334:src/InterruptRoutine.cpp **** //
 335:src/InterruptRoutine.cpp **** //            //moguce da ce morati da se poziva kao funkcija
 336:src/InterruptRoutine.cpp **** //            uint64  sepc;
 337:src/InterruptRoutine.cpp **** //            __asm__ volatile("csrr %0,sepc": "=r" (sepc));
 338:src/InterruptRoutine.cpp **** //            sepc +=4;
 339:src/InterruptRoutine.cpp **** //            uint64  sstatus;
 340:src/InterruptRoutine.cpp **** //            __asm__ volatile("csrr %0,sstatus": "=r" (sstatus));
 341:src/InterruptRoutine.cpp **** //
 342:src/InterruptRoutine.cpp **** //            ThreadABI::timeSliceCounterSet();
 343:src/InterruptRoutine.cpp **** //
 344:src/InterruptRoutine.cpp **** //            ThreadABI::dispatch();
 345:src/InterruptRoutine.cpp **** //            //u ovoj linij su 0
 346:src/InterruptRoutine.cpp **** //            __asm__ volatile ("csrw sstatus, %0" : : "r"(sstatus));
 347:src/InterruptRoutine.cpp **** //            __asm__ volatile ("csrw sepc, %0" : :  "r"(sepc));
 348:src/InterruptRoutine.cpp **** //
 349:src/InterruptRoutine.cpp **** //        }
 350:src/InterruptRoutine.cpp ****     }
 351:src/InterruptRoutine.cpp ****     else if (causevalue == 0x8000000000000009UL)
 153              		.loc 1 351 10 is_stmt 1
 154              	.LBB108:
 155              	.LBB45:
 156 0084 9307F0FF 		li	a5,-1
 157 0088 9397F703 		slli	a5,a5,63
 158 008c 93879700 		addi	a5,a5,9
 159 0090 630CF734 		beq	a4,a5,.L32
 160              	.LBE45:
 161              	.LBE108:
 352:src/InterruptRoutine.cpp ****     {
 353:src/InterruptRoutine.cpp **** 
 354:src/InterruptRoutine.cpp ****         if(plic_claim()==0x0a){
 355:src/InterruptRoutine.cpp ****             uint8 *num=(uint8*)CONSOLE_STATUS;
GAS LISTING /tmp/ccWUainM.s 			page 10


 356:src/InterruptRoutine.cpp **** 
 357:src/InterruptRoutine.cpp ****             if (*num & CONSOLE_RX_STATUS_BIT){
 358:src/InterruptRoutine.cpp ****                 SemaphoreABI::semsignalABI(BufferPrinting::out);
 359:src/InterruptRoutine.cpp **** 
 360:src/InterruptRoutine.cpp ****             }
 361:src/InterruptRoutine.cpp ****             if (*num & CONSOLE_TX_STATUS_BIT){
 362:src/InterruptRoutine.cpp ****                 //putc
 363:src/InterruptRoutine.cpp ****                SemaphoreABI::semsignalABI(BufferPrinting::in);
 364:src/InterruptRoutine.cpp **** 
 365:src/InterruptRoutine.cpp ****             }
 366:src/InterruptRoutine.cpp **** 
 367:src/InterruptRoutine.cpp ****             plic_complete(0x0a);
 368:src/InterruptRoutine.cpp ****         }
 369:src/InterruptRoutine.cpp ****     }
 370:src/InterruptRoutine.cpp ****     else if (causevalue == 0x8000000000000001UL)
 162              		.loc 1 370 10
 163              	.LBB109:
 164              	.LBB57:
 165              	.LBB46:
 166 0094 9307F0FF 		li	a5,-1
 167 0098 9397F703 		slli	a5,a5,63
 168 009c 93871700 		addi	a5,a5,1
 169 00a0 630EF73A 		beq	a4,a5,.L33
 170              	.LVL5:
 171              	.L3:
 172              	.LBE46:
 173              	.LBE57:
 174              	.LBE109:
 371:src/InterruptRoutine.cpp ****     {
 372:src/InterruptRoutine.cpp ****         asm volatile("csrc sip,0x02");
 373:src/InterruptRoutine.cpp **** 
 374:src/InterruptRoutine.cpp ****         uint64 savedSEPC;
 375:src/InterruptRoutine.cpp ****         asm volatile("csrr %0, sepc" : "=r"(savedSEPC));
 376:src/InterruptRoutine.cpp ****         uint64 savesstatus;
 377:src/InterruptRoutine.cpp ****         asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 378:src/InterruptRoutine.cpp ****         //ovo vadi niti iz sleep
 379:src/InterruptRoutine.cpp ****         ThreadABI *tmp=SchedulerABI::headsleep;
 380:src/InterruptRoutine.cpp ****         while (tmp){
 381:src/InterruptRoutine.cpp ****             if(tmp->decrementsleep()==0){
 382:src/InterruptRoutine.cpp ****                 SchedulerABI::headsleep=SchedulerABI::headsleep->next;
 383:src/InterruptRoutine.cpp ****                 SchedulerABI::getInstanceScheduler().put(tmp);
 384:src/InterruptRoutine.cpp **** 
 385:src/InterruptRoutine.cpp ****             }
 386:src/InterruptRoutine.cpp ****             tmp=tmp->next;
 387:src/InterruptRoutine.cpp ****         }
 388:src/InterruptRoutine.cpp **** 
 389:src/InterruptRoutine.cpp **** 
 390:src/InterruptRoutine.cpp ****         if(ThreadABI::running->timeSliceCounterDecrement()==0){
 391:src/InterruptRoutine.cpp ****             ThreadABI::running->timeSliceCounterSet();
 392:src/InterruptRoutine.cpp ****             ThreadABI::yield();
 393:src/InterruptRoutine.cpp **** 
 394:src/InterruptRoutine.cpp ****         }
 395:src/InterruptRoutine.cpp ****         asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 396:src/InterruptRoutine.cpp **** 
 397:src/InterruptRoutine.cpp ****         //increment pc
 398:src/InterruptRoutine.cpp ****         asm volatile("csrw sepc, %0" : : "r"(savedSEPC));
 399:src/InterruptRoutine.cpp **** 
GAS LISTING /tmp/ccWUainM.s 			page 11


 400:src/InterruptRoutine.cpp ****     }
 401:src/InterruptRoutine.cpp ****     else{
 402:src/InterruptRoutine.cpp **** 
 403:src/InterruptRoutine.cpp ****     }
 404:src/InterruptRoutine.cpp **** 
 405:src/InterruptRoutine.cpp ****     //__asm__ volatile("csrc sip, 0x02");
 406:src/InterruptRoutine.cpp **** //    __asm__ volatile("csrc sip, 0x0A");
 407:src/InterruptRoutine.cpp **** }
 175              		.loc 1 407 1 is_stmt 0
 176 00a4 83308107 		ld	ra,120(sp)
 177              		.cfi_remember_state
 178              		.cfi_restore 1
 179 00a8 03340107 		ld	s0,112(sp)
 180              		.cfi_restore 8
 181              		.cfi_def_cfa 2, 128
 182 00ac 83348106 		ld	s1,104(sp)
 183              		.cfi_restore 9
 184 00b0 03390106 		ld	s2,96(sp)
 185              		.cfi_restore 18
 186 00b4 83398105 		ld	s3,88(sp)
 187              		.cfi_restore 19
 188 00b8 033A0105 		ld	s4,80(sp)
 189              		.cfi_restore 20
 190 00bc 833A8104 		ld	s5,72(sp)
 191              		.cfi_restore 21
 192 00c0 13010108 		addi	sp,sp,128
 193              		.cfi_def_cfa_offset 0
 194              	.LVL6:
 195 00c4 67800000 		jr	ra
 196              	.LVL7:
 197              	.L31:
 198              		.cfi_restore_state
  43:src/InterruptRoutine.cpp ****             //mem_alloc
 199              		.loc 1 43 9 is_stmt 1
 200              	.LBB110:
 201              	.LBB58:
 202 00c8 6386F408 		beq	s1,a5,.L34
 203              	.LVL8:
 204              	.L5:
 205              	.LBE58:
 206              	.LBE110:
  68:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 207              		.loc 1 68 9
 208              	.LBB111:
 209              	.LBB60:
 210 00cc 93072000 		li	a5,2
 211 00d0 638CF40A 		beq	s1,a5,.L35
 212              	.L6:
 213              	.LBE60:
 214              	.LBE111:
  89:src/InterruptRoutine.cpp ****             //threadcreate
 215              		.loc 1 89 9
 216              	.LBB112:
 217              	.LBB62:
 218 00d4 93071001 		li	a5,17
 219 00d8 6386F40E 		beq	s1,a5,.L36
 220              	.L7:
GAS LISTING /tmp/ccWUainM.s 			page 12


 221              	.LBE62:
 222              	.LBE112:
 124:src/InterruptRoutine.cpp ****             //gasenje niti nasilno
 223              		.loc 1 124 9
 224              	.LBB113:
 225              	.LBB65:
 226 00dc 93072001 		li	a5,18
 227 00e0 6388F412 		beq	s1,a5,.L37
 228              	.L9:
 229              	.LBE65:
 230              	.LBE113:
 140:src/InterruptRoutine.cpp ****             // ovo je dispatch
 231              		.loc 1 140 9
 232              	.LBB114:
 233              	.LBB69:
 234 00e4 93073001 		li	a5,19
 235 00e8 638CF414 		beq	s1,a5,.L38
 236              	.L10:
 237              	.LBE69:
 238              	.LBE114:
 158:src/InterruptRoutine.cpp ****             //custom start za cpp api
 239              		.loc 1 158 9
 240              	.LBB115:
 241              	.LBB71:
 242 00ec 93074001 		li	a5,20
 243 00f0 6388F416 		beq	s1,a5,.L39
 244              	.L11:
 245              	.LBE71:
 246              	.LBE115:
 183:src/InterruptRoutine.cpp ****            //semopen
 247              		.loc 1 183 9
 248              	.LBB116:
 249              	.LBB74:
 250 00f4 93071002 		li	a5,33
 251 00f8 6386F41A 		beq	s1,a5,.L40
 252              	.L13:
 253              	.LBE74:
 254              	.LBE116:
 204:src/InterruptRoutine.cpp ****             //semclose
 255              		.loc 1 204 9
 256              	.LBB117:
 257              	.LBB76:
 258 00fc 93072002 		li	a5,34
 259 0100 6388F41C 		beq	s1,a5,.L41
 260              	.L14:
 261              	.LBE76:
 262              	.LBE117:
 225:src/InterruptRoutine.cpp ****             //semwait
 263              		.loc 1 225 9
 264              	.LBB118:
 265              	.LBB78:
 266 0104 93073002 		li	a5,35
 267 0108 6388F41E 		beq	s1,a5,.L42
 268              	.L15:
 269              	.LBE78:
 270              	.LBE118:
 248:src/InterruptRoutine.cpp ****             //semsignal
GAS LISTING /tmp/ccWUainM.s 			page 13


 271              		.loc 1 248 9
 272              	.LBB119:
 273              	.LBB80:
 274 010c 93074002 		li	a5,36
 275 0110 6388F420 		beq	s1,a5,.L43
 276              	.L16:
 277              	.LBE80:
 278              	.LBE119:
 269:src/InterruptRoutine.cpp ****             //semsignal
 279              		.loc 1 269 9
 280              	.LBB120:
 281              	.LBB82:
 282 0114 93071003 		li	a5,49
 283 0118 6388F422 		beq	s1,a5,.L44
 284              	.L17:
 285              	.LBE82:
 286              	.LBE120:
 287:src/InterruptRoutine.cpp ****             //getc
 287              		.loc 1 287 9
 288              	.LBB121:
 289              	.LBB84:
 290 011c 93071004 		li	a5,65
 291 0120 638AF424 		beq	s1,a5,.L45
 292              	.L18:
 293              	.LBE84:
 294              	.LBE121:
 300:src/InterruptRoutine.cpp ****             //putc
 295              		.loc 1 300 9
 296              	.LBB122:
 297              	.LBB86:
 298 0124 93072004 		li	a5,66
 299 0128 638EF426 		beq	s1,a5,.L46
 300              	.LVL9:
 301              	.L19:
 302              	.LBE86:
 303              	.LBE122:
 313:src/InterruptRoutine.cpp ****         {
 304              		.loc 1 313 9
 305              	.LBB123:
 306              	.LBB88:
 307 012c 9307F00F 		li	a5,255
 308 0130 6380F42A 		beq	s1,a5,.L47
 309              	.L20:
 310              	.LBE88:
 311              	.LBE123:
 323:src/InterruptRoutine.cpp ****         {
 312              		.loc 1 323 9
 313              	.LBB124:
 314              	.LBB90:
 315 0134 9307E00F 		li	a5,254
 316 0138 E396F4F6 		bne	s1,a5,.L3
 317              	.LBB91:
 325:src/InterruptRoutine.cpp ****             asm volatile("csrr %0, sstatus" : "=r" (temp));
 318              		.loc 1 325 13
 326:src/InterruptRoutine.cpp ****             temp |= 0x100;
 319              		.loc 1 326 13
 326:src/InterruptRoutine.cpp ****             temp |= 0x100;
GAS LISTING /tmp/ccWUainM.s 			page 14


 320              		.loc 1 326 59 is_stmt 0
 321              	#APP
 322              	# 326 "src/InterruptRoutine.cpp" 1
 323              		csrr a5, sstatus
 324              	# 0 "" 2
 325              	.LVL10:
 327:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r" (temp));
 326              		.loc 1 327 13 is_stmt 1
 327:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r" (temp));
 327              		.loc 1 327 18 is_stmt 0
 328              	#NO_APP
 329 0140 93E70710 		ori	a5,a5,256
 330              	.LVL11:
 328:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 331              		.loc 1 328 13 is_stmt 1
 328:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 332              		.loc 1 328 60 is_stmt 0
 333              	#APP
 334              	# 328 "src/InterruptRoutine.cpp" 1
 329:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 335              		csrw sstatus, a5
 336              	# 0 "" 2
 337              		.loc 1 329 13 is_stmt 1
 329:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 338              		.loc 1 329 26 is_stmt 0
 339              	#NO_APP
 340 0148 13094900 		addi	s2,s2,4
 341              	.LVL12:
 330:src/InterruptRoutine.cpp ****         }
 342              		.loc 1 330 13 is_stmt 1
 330:src/InterruptRoutine.cpp ****         }
 343              		.loc 1 330 70 is_stmt 0
 344              	#APP
 345              	# 330 "src/InterruptRoutine.cpp" 1
 346              		csrw sepc, s2
 347              	# 0 "" 2
 348              	#NO_APP
 349              	.LBE91:
 350 0150 6FF05FF5 		j	.L3
 351              	.LVL13:
 352              	.L34:
 353              	.LBE90:
 354              	.LBB92:
 355              	.LBB59:
  45:src/InterruptRoutine.cpp **** 
 356              		.loc 1 45 13 is_stmt 1
  45:src/InterruptRoutine.cpp **** 
 357              		.loc 1 45 20 is_stmt 0
 358 0154 833A84F8 		ld	s5,-120(s0)
 359              	.LVL14:
  48:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 360              		.loc 1 48 13 is_stmt 1
  49:src/InterruptRoutine.cpp **** 
 361              		.loc 1 49 13
  49:src/InterruptRoutine.cpp **** 
 362              		.loc 1 49 66 is_stmt 0
 363              	#APP
GAS LISTING /tmp/ccWUainM.s 			page 15


 364              	# 49 "src/InterruptRoutine.cpp" 1
 365              		csrr  s4, sstatus
 366              	# 0 "" 2
 367              	.LVL15:
  52:src/InterruptRoutine.cpp **** 
 368              		.loc 1 52 13 is_stmt 1
  52:src/InterruptRoutine.cpp **** 
 369              		.loc 1 52 62 is_stmt 0
 370              	#NO_APP
 371 015c 97000000 		call	_ZN15MemoryAllocator11getInstanceEv@plt
 371      E7800000 
 372              	.LVL16:
  52:src/InterruptRoutine.cpp **** 
 373              		.loc 1 52 75
 374 0164 93850A00 		mv	a1,s5
 375 0168 97000000 		call	_ZN15MemoryAllocator11MemoryAllocEm@plt
 375      E7800000 
 376              	.LVL17:
  54:src/InterruptRoutine.cpp **** 
 377              		.loc 1 54 13 is_stmt 1
  54:src/InterruptRoutine.cpp **** 
 378              		.loc 1 54 66 is_stmt 0
 379              	#APP
 380              	# 54 "src/InterruptRoutine.cpp" 1
  58:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 381              		csrw sstatus, s4
 382              	# 0 "" 2
 383              		.loc 1 58 13 is_stmt 1
  58:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 384              		.loc 1 58 66 is_stmt 0
 385              	# 58 "src/InterruptRoutine.cpp" 1
  59:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 386              		mv a0, a0
 387              	# 0 "" 2
 388              		.loc 1 59 13 is_stmt 1
  59:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 389              		.loc 1 59 62 is_stmt 0
 390              	# 59 "src/InterruptRoutine.cpp" 1
  61:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 391              		sd a0,0x50(s3)
 392              	# 0 "" 2
 393              		.loc 1 61 13 is_stmt 1
  61:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 394              		.loc 1 61 26 is_stmt 0
 395              	#NO_APP
 396 017c 13094900 		addi	s2,s2,4
 397              	.LVL18:
  62:src/InterruptRoutine.cpp **** 
 398              		.loc 1 62 13 is_stmt 1
  62:src/InterruptRoutine.cpp **** 
 399              		.loc 1 62 70 is_stmt 0
 400              	#APP
 401              	# 62 "src/InterruptRoutine.cpp" 1
 402              		csrw sepc, s2
 403              	# 0 "" 2
 404              	#NO_APP
 405              	.LBE59:
GAS LISTING /tmp/ccWUainM.s 			page 16


 406 0184 6FF09FF4 		j	.L5
 407              	.LVL19:
 408              	.L35:
 409              	.LBE92:
 410              	.LBB93:
 411              	.LBB61:
  69:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 412              		.loc 1 69 13 is_stmt 1
  69:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 413              		.loc 1 69 26 is_stmt 0
 414 0188 13094900 		addi	s2,s2,4
 415              	.LVL20:
  70:src/InterruptRoutine.cpp ****             void* handler= reinterpret_cast<void *>(a[1]);
 416              		.loc 1 70 13 is_stmt 1
  70:src/InterruptRoutine.cpp ****             void* handler= reinterpret_cast<void *>(a[1]);
 417              		.loc 1 70 70 is_stmt 0
 418              	#APP
 419              	# 70 "src/InterruptRoutine.cpp" 1
  71:src/InterruptRoutine.cpp **** 
 420              		csrw sepc, s2
 421              	# 0 "" 2
 422              		.loc 1 71 13 is_stmt 1
  71:src/InterruptRoutine.cpp **** 
 423              		.loc 1 71 56 is_stmt 0
 424              	#NO_APP
 425 0190 833A84F8 		ld	s5,-120(s0)
 426              	.LVL21:
  74:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 427              		.loc 1 74 13 is_stmt 1
  75:src/InterruptRoutine.cpp **** 
 428              		.loc 1 75 13
  75:src/InterruptRoutine.cpp **** 
 429              		.loc 1 75 66 is_stmt 0
 430              	#APP
 431              	# 75 "src/InterruptRoutine.cpp" 1
 432              		csrr  s4, sstatus
 433              	# 0 "" 2
 434              	.LVL22:
  78:src/InterruptRoutine.cpp **** 
 435              		.loc 1 78 13 is_stmt 1
  78:src/InterruptRoutine.cpp **** 
 436              		.loc 1 78 42 is_stmt 0
 437              	#NO_APP
 438 0198 97000000 		call	_ZN15MemoryAllocator11getInstanceEv@plt
 438      E7800000 
 439              	.LVL23:
  78:src/InterruptRoutine.cpp **** 
 440              		.loc 1 78 54
 441 01a0 93850A00 		mv	a1,s5
 442 01a4 97000000 		call	_ZN15MemoryAllocator10MemoryFreeEPv@plt
 442      E7800000 
 443              	.LVL24:
  80:src/InterruptRoutine.cpp **** 
 444              		.loc 1 80 13 is_stmt 1
  80:src/InterruptRoutine.cpp **** 
 445              		.loc 1 80 66 is_stmt 0
 446              	#APP
GAS LISTING /tmp/ccWUainM.s 			page 17


 447              	# 80 "src/InterruptRoutine.cpp" 1
  83:src/InterruptRoutine.cpp ****             //umetanje ret value u ovom slucaju nije ni potrebno
 448              		csrw sstatus, s4
 449              	# 0 "" 2
 450              		.loc 1 83 13 is_stmt 1
 451              	.LVL25:
  85:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 452              		.loc 1 85 13
  85:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 453              		.loc 1 85 64 is_stmt 0
 454              	#NO_APP
 455 01b0 B7776900 		li	a5,6909952
 456 01b4 93879796 		addi	a5,a5,-1687
 457              	#APP
 458              	# 85 "src/InterruptRoutine.cpp" 1
  86:src/InterruptRoutine.cpp **** 
 459              		mv a0, a5
 460              	# 0 "" 2
 461              		.loc 1 86 13 is_stmt 1
  86:src/InterruptRoutine.cpp **** 
 462              		.loc 1 86 62 is_stmt 0
 463              	# 86 "src/InterruptRoutine.cpp" 1
 464              		sd a0,0x50(s3)
 465              	# 0 "" 2
 466              	#NO_APP
 467              	.LBE61:
 468 01c0 6FF05FF1 		j	.L6
 469              	.LVL26:
 470              	.L36:
 471              	.LBE93:
 472              	.LBB94:
 473              	.LBB63:
  94:src/InterruptRoutine.cpp ****             void* arg= reinterpret_cast<void *>(a[3]);
 474              		.loc 1 94 13 is_stmt 1
  95:src/InterruptRoutine.cpp ****             void(*fun)(void*)=reinterpret_cast<void (*)(void *)>(a[2]);
 475              		.loc 1 95 13
  96:src/InterruptRoutine.cpp ****             ThreadABI **handle= reinterpret_cast<ThreadABI **>(a[1]);
 476              		.loc 1 96 13
  97:src/InterruptRoutine.cpp **** 
 477              		.loc 1 97 13
 100:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 478              		.loc 1 100 13
 101:src/InterruptRoutine.cpp ****             uint64 returngflag;
 479              		.loc 1 101 13
 101:src/InterruptRoutine.cpp ****             uint64 returngflag;
 480              		.loc 1 101 66 is_stmt 0
 481              	#APP
 482              	# 101 "src/InterruptRoutine.cpp" 1
 483              		csrr  s4, sstatus
 484              	# 0 "" 2
 485              	.LVL27:
 102:src/InterruptRoutine.cpp **** 
 486              		.loc 1 102 13 is_stmt 1
 104:src/InterruptRoutine.cpp ****                 //greska
 487              		.loc 1 104 13
 104:src/InterruptRoutine.cpp ****                 //greska
 488              		.loc 1 104 40 is_stmt 0
GAS LISTING /tmp/ccWUainM.s 			page 18


 489              	#NO_APP
 490 01c8 833604FA 		ld	a3,-96(s0)
 491 01cc 033684F9 		ld	a2,-104(s0)
 492 01d0 833504F9 		ld	a1,-112(s0)
 493 01d4 033584F8 		ld	a0,-120(s0)
 494 01d8 97000000 		call	_ZN9ThreadABI13thread_createEPPS_PFvPvES2_S2_@plt
 494      E7800000 
 495              	.LVL28:
 104:src/InterruptRoutine.cpp ****                 //greska
 496              		.loc 1 104 13
 497 01e0 63400502 		bltz	a0,.L48
 498              	.L8:
 113:src/InterruptRoutine.cpp ****             //umetanje ret value u ovom slucaju nije ni potrebno
 499              		.loc 1 113 13 is_stmt 1
 500              	.LVL29:
 115:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 501              		.loc 1 115 13
 115:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 502              		.loc 1 115 64 is_stmt 0
 503 01e4 93070000 		li	a5,0
 504              	#APP
 505              	# 115 "src/InterruptRoutine.cpp" 1
 116:src/InterruptRoutine.cpp **** 
 506              		mv a0, a5
 507              	# 0 "" 2
 508              		.loc 1 116 13 is_stmt 1
 116:src/InterruptRoutine.cpp **** 
 509              		.loc 1 116 62 is_stmt 0
 510              	# 116 "src/InterruptRoutine.cpp" 1
 118:src/InterruptRoutine.cpp **** 
 511              		sd a0,0x50(s3)
 512              	# 0 "" 2
 513              		.loc 1 118 13 is_stmt 1
 118:src/InterruptRoutine.cpp **** 
 514              		.loc 1 118 66 is_stmt 0
 515              	# 118 "src/InterruptRoutine.cpp" 1
 120:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 516              		csrw sstatus, s4
 517              	# 0 "" 2
 518              		.loc 1 120 13 is_stmt 1
 120:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 519              		.loc 1 120 26 is_stmt 0
 520              	#NO_APP
 521 01f4 13094900 		addi	s2,s2,4
 522              	.LVL30:
 121:src/InterruptRoutine.cpp **** 
 523              		.loc 1 121 13 is_stmt 1
 121:src/InterruptRoutine.cpp **** 
 524              		.loc 1 121 70 is_stmt 0
 525              	#APP
 526              	# 121 "src/InterruptRoutine.cpp" 1
 527              		csrw sepc, s2
 528              	# 0 "" 2
 529              	#NO_APP
 530              	.LBE63:
 531 01fc 6FF01FEE 		j	.L7
 532              	.LVL31:
GAS LISTING /tmp/ccWUainM.s 			page 19


 533              	.L48:
 534              	.LBB64:
 106:src/InterruptRoutine.cpp ****                 //umetanje ret value u ovom slucaju nije ni potrebno
 535              		.loc 1 106 17 is_stmt 1
 108:src/InterruptRoutine.cpp ****                 __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 536              		.loc 1 108 17
 108:src/InterruptRoutine.cpp ****                 __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 537              		.loc 1 108 68 is_stmt 0
 538 0200 9307F0FF 		li	a5,-1
 539              	#APP
 540              	# 108 "src/InterruptRoutine.cpp" 1
 109:src/InterruptRoutine.cpp ****             }
 541              		mv a0, a5
 542              	# 0 "" 2
 543              		.loc 1 109 17 is_stmt 1
 109:src/InterruptRoutine.cpp ****             }
 544              		.loc 1 109 66 is_stmt 0
 545              	# 109 "src/InterruptRoutine.cpp" 1
 546              		sd a0,0x50(s3)
 547              	# 0 "" 2
 548              	#NO_APP
 549 020c 6FF09FFD 		j	.L8
 550              	.LVL32:
 551              	.L37:
 552              	.LBE64:
 553              	.LBE94:
 554              	.LBB95:
 555              	.LBB66:
 127:src/InterruptRoutine.cpp **** 
 556              		.loc 1 127 13 is_stmt 1
 127:src/InterruptRoutine.cpp **** 
 557              		.loc 1 127 41 is_stmt 0
 558 0210 97070000 		la	a5,_ZN9ThreadABI7runningE
 558      83B70700 
 559 0218 83B70700 		ld	a5,0(a5)
 560              	.LVL33:
 561              	.LBB67:
 562              	.LBB68:
 563              		.file 2 "src/../h/ThreadABI.hpp"
   1:src/../h/ThreadABI.hpp **** ////
   2:src/../h/ThreadABI.hpp **** //// Created by os on 5/22/22.
   3:src/../h/ThreadABI.hpp **** ////
   4:src/../h/ThreadABI.hpp **** //
   5:src/../h/ThreadABI.hpp **** #ifndef thread_abi
   6:src/../h/ThreadABI.hpp **** #define thread_abi
   7:src/../h/ThreadABI.hpp **** #include "../lib/hw.h"
   8:src/../h/ThreadABI.hpp **** #include "definefile.hpp"
   9:src/../h/ThreadABI.hpp **** #include "SchedulerABI.hpp"
  10:src/../h/ThreadABI.hpp **** 
  11:src/../h/ThreadABI.hpp **** class ThreadABI{
  12:src/../h/ThreadABI.hpp **** public:
  13:src/../h/ThreadABI.hpp ****     MEM_ALLOC;
  14:src/../h/ThreadABI.hpp **** 
  15:src/../h/ThreadABI.hpp ****     static ThreadABI *idle;
  16:src/../h/ThreadABI.hpp ****     static  ThreadABI *main;
  17:src/../h/ThreadABI.hpp ****     ThreadABI()=default;
  18:src/../h/ThreadABI.hpp **** 
GAS LISTING /tmp/ccWUainM.s 			page 20


  19:src/../h/ThreadABI.hpp **** 
  20:src/../h/ThreadABI.hpp ****     static void pushregs();
  21:src/../h/ThreadABI.hpp ****     static void popregs();
  22:src/../h/ThreadABI.hpp **** 
  23:src/../h/ThreadABI.hpp ****     friend class SchedulerABI;
  24:src/../h/ThreadABI.hpp ****     ThreadABI *next= nullptr;
  25:src/../h/ThreadABI.hpp **** 
  26:src/../h/ThreadABI.hpp ****     enum State{
  27:src/../h/ThreadABI.hpp ****         CREATED,READY,SLEEP,BLOCKED,FINISHED
  28:src/../h/ThreadABI.hpp ****     };
  29:src/../h/ThreadABI.hpp **** 
  30:src/../h/ThreadABI.hpp ****    static int thread_create (
  31:src/../h/ThreadABI.hpp ****             ThreadABI** handle,
  32:src/../h/ThreadABI.hpp ****             void(*start_routine)(void*),
  33:src/../h/ThreadABI.hpp ****             void* arg,
  34:src/../h/ThreadABI.hpp ****             void* stack_space
  35:src/../h/ThreadABI.hpp ****     );
  36:src/../h/ThreadABI.hpp ****     ~ThreadABI() =default;
  37:src/../h/ThreadABI.hpp ****     ThreadABI(const ThreadABI&)=delete;
  38:src/../h/ThreadABI.hpp ****     ThreadABI( ThreadABI&&)=delete;
  39:src/../h/ThreadABI.hpp ****     ThreadABI operator=(const ThreadABI&)=delete;
  40:src/../h/ThreadABI.hpp ****     ThreadABI operator=( ThreadABI&&)=delete;
  41:src/../h/ThreadABI.hpp **** 
  42:src/../h/ThreadABI.hpp ****      int timeSliceCounterDecrement(){return --timeSliceCounter;}
  43:src/../h/ThreadABI.hpp **** 
  44:src/../h/ThreadABI.hpp **** 
  45:src/../h/ThreadABI.hpp **** 
  46:src/../h/ThreadABI.hpp ****      void timeSliceCounterSet(){timeSliceCounter=DEFAULT_TIME_SLICE;}
  47:src/../h/ThreadABI.hpp ****      bool timeSliceEnd(){ return 0==timeSliceCounter; }
  48:src/../h/ThreadABI.hpp **** 
  49:src/../h/ThreadABI.hpp ****     void setState(State value) { state = value; }
 564              		.loc 2 49 34 is_stmt 1
 565              		.loc 2 49 40 is_stmt 0
 566 021c 13074000 		li	a4,4
 567 0220 23A6E700 		sw	a4,12(a5)
 568              	.LVL34:
 569              	.LBE68:
 570              	.LBE67:
 129:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 571              		.loc 1 129 13 is_stmt 1
 130:src/InterruptRoutine.cpp **** 
 572              		.loc 1 130 13
 130:src/InterruptRoutine.cpp **** 
 573              		.loc 1 130 66 is_stmt 0
 574              	#APP
 575              	# 130 "src/InterruptRoutine.cpp" 1
 576              		csrr  s4, sstatus
 577              	# 0 "" 2
 578              	.LVL35:
 132:src/InterruptRoutine.cpp **** 
 579              		.loc 1 132 13 is_stmt 1
 132:src/InterruptRoutine.cpp **** 
 580              		.loc 1 132 29 is_stmt 0
 581              	#NO_APP
 582 0228 97000000 		call	_ZN9ThreadABI5yieldEv@plt
 582      E7800000 
 583              	.LVL36:
GAS LISTING /tmp/ccWUainM.s 			page 21


 134:src/InterruptRoutine.cpp **** 
 584              		.loc 1 134 13 is_stmt 1
 134:src/InterruptRoutine.cpp **** 
 585              		.loc 1 134 66 is_stmt 0
 586              	#APP
 587              	# 134 "src/InterruptRoutine.cpp" 1
 136:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 588              		csrw sstatus, s4
 589              	# 0 "" 2
 590              		.loc 1 136 13 is_stmt 1
 136:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 591              		.loc 1 136 26 is_stmt 0
 592              	#NO_APP
 593 0234 13094900 		addi	s2,s2,4
 594              	.LVL37:
 137:src/InterruptRoutine.cpp **** 
 595              		.loc 1 137 13 is_stmt 1
 137:src/InterruptRoutine.cpp **** 
 596              		.loc 1 137 70 is_stmt 0
 597              	#APP
 598              	# 137 "src/InterruptRoutine.cpp" 1
 599              		csrw sepc, s2
 600              	# 0 "" 2
 601              	#NO_APP
 602              	.LBE66:
 603 023c 6FF09FEA 		j	.L9
 604              	.LVL38:
 605              	.L38:
 606              	.LBE95:
 607              	.LBB96:
 608              	.LBB70:
 143:src/InterruptRoutine.cpp ****             asm volatile("csrr %0, sepc" : "=r"(savedSEPC));
 609              		.loc 1 143 13 is_stmt 1
 144:src/InterruptRoutine.cpp **** 
 610              		.loc 1 144 13
 144:src/InterruptRoutine.cpp **** 
 611              		.loc 1 144 60 is_stmt 0
 612              	#APP
 613              	# 144 "src/InterruptRoutine.cpp" 1
 614              		csrr s4, sepc
 615              	# 0 "" 2
 616              	.LVL39:
 146:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 617              		.loc 1 146 13 is_stmt 1
 147:src/InterruptRoutine.cpp **** 
 618              		.loc 1 147 13
 147:src/InterruptRoutine.cpp **** 
 619              		.loc 1 147 66 is_stmt 0
 620              	# 147 "src/InterruptRoutine.cpp" 1
 621              		csrr  s5, sstatus
 622              	# 0 "" 2
 623              	.LVL40:
 149:src/InterruptRoutine.cpp ****             // mozda treba ali vec imam sacuvan pc  ako bude error odkometarisiii
 624              		.loc 1 149 13 is_stmt 1
 149:src/InterruptRoutine.cpp ****             // mozda treba ali vec imam sacuvan pc  ako bude error odkometarisiii
 625              		.loc 1 149 29 is_stmt 0
 626              	#NO_APP
GAS LISTING /tmp/ccWUainM.s 			page 22


 627 0248 97000000 		call	_ZN9ThreadABI5yieldEv@plt
 627      E7800000 
 628              	.LVL41:
 151:src/InterruptRoutine.cpp **** 
 629              		.loc 1 151 13 is_stmt 1
 151:src/InterruptRoutine.cpp **** 
 630              		.loc 1 151 66 is_stmt 0
 631              	#APP
 632              	# 151 "src/InterruptRoutine.cpp" 1
 154:src/InterruptRoutine.cpp ****             asm volatile("csrw sepc, %0" : : "r"(savedSEPC));
 633              		csrw sstatus, s5
 634              	# 0 "" 2
 635              		.loc 1 154 13 is_stmt 1
 154:src/InterruptRoutine.cpp ****             asm volatile("csrw sepc, %0" : : "r"(savedSEPC));
 636              		.loc 1 154 22 is_stmt 0
 637              	#NO_APP
 638 0254 130A4A00 		addi	s4,s4,4
 639              	.LVL42:
 155:src/InterruptRoutine.cpp **** 
 640              		.loc 1 155 13 is_stmt 1
 155:src/InterruptRoutine.cpp **** 
 641              		.loc 1 155 61 is_stmt 0
 642              	#APP
 643              	# 155 "src/InterruptRoutine.cpp" 1
 644              		csrw sepc, s4
 645              	# 0 "" 2
 646              	#NO_APP
 647              	.LBE70:
 648 025c 6FF01FE9 		j	.L10
 649              	.LVL43:
 650              	.L39:
 651              	.LBE96:
 652              	.LBB97:
 653              	.LBB72:
 162:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 654              		.loc 1 162 13 is_stmt 1
 163:src/InterruptRoutine.cpp **** 
 655              		.loc 1 163 13
 163:src/InterruptRoutine.cpp **** 
 656              		.loc 1 163 66 is_stmt 0
 657              	#APP
 658              	# 163 "src/InterruptRoutine.cpp" 1
 659              		csrr  s5, sstatus
 660              	# 0 "" 2
 661              	.LVL44:
 165:src/InterruptRoutine.cpp ****             uint64 returngflag;
 662              		.loc 1 165 13 is_stmt 1
 165:src/InterruptRoutine.cpp ****             uint64 returngflag;
 663              		.loc 1 165 65 is_stmt 0
 664              	#NO_APP
 665 0264 033A84F8 		ld	s4,-120(s0)
 666              	.LVL45:
 166:src/InterruptRoutine.cpp ****             if(handle!= nullptr){
 667              		.loc 1 166 13 is_stmt 1
 167:src/InterruptRoutine.cpp ****                 SchedulerABI::getInstanceScheduler().put(handle);
 668              		.loc 1 167 13
 669 0268 63100A02 		bnez	s4,.L49
GAS LISTING /tmp/ccWUainM.s 			page 23


 173:src/InterruptRoutine.cpp **** 
 670              		.loc 1 173 24 is_stmt 0
 671 026c 9307F0FF 		li	a5,-1
 672              	.L12:
 673              	.LVL46:
 175:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 674              		.loc 1 175 13 is_stmt 1
 175:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 675              		.loc 1 175 64 is_stmt 0
 676              	#APP
 677              	# 175 "src/InterruptRoutine.cpp" 1
 176:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 678              		mv a0, a5
 679              	# 0 "" 2
 680              		.loc 1 176 13 is_stmt 1
 176:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 681              		.loc 1 176 62 is_stmt 0
 682              	# 176 "src/InterruptRoutine.cpp" 1
 177:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 683              		sd a0,0x50(s3)
 684              	# 0 "" 2
 685              		.loc 1 177 13 is_stmt 1
 177:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 686              		.loc 1 177 66 is_stmt 0
 687              	# 177 "src/InterruptRoutine.cpp" 1
 178:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 688              		csrw sstatus, s5
 689              	# 0 "" 2
 690              		.loc 1 178 13 is_stmt 1
 178:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 691              		.loc 1 178 26 is_stmt 0
 692              	#NO_APP
 693 027c 13094900 		addi	s2,s2,4
 694              	.LVL47:
 179:src/InterruptRoutine.cpp **** 
 695              		.loc 1 179 13 is_stmt 1
 179:src/InterruptRoutine.cpp **** 
 696              		.loc 1 179 70 is_stmt 0
 697              	#APP
 698              	# 179 "src/InterruptRoutine.cpp" 1
 699              		csrw sepc, s2
 700              	# 0 "" 2
 701              	#NO_APP
 702              	.LBE72:
 703 0284 6FF01FE7 		j	.L11
 704              	.LVL48:
 705              	.L49:
 706              	.LBB73:
 168:src/InterruptRoutine.cpp ****                 returngflag= 1;
 707              		.loc 1 168 17 is_stmt 1
 168:src/InterruptRoutine.cpp ****                 returngflag= 1;
 708              		.loc 1 168 52 is_stmt 0
 709 0288 97000000 		call	_ZN12SchedulerABI20getInstanceSchedulerEv@plt
 709      E7800000 
 710              	.LVL49:
 168:src/InterruptRoutine.cpp ****                 returngflag= 1;
 711              		.loc 1 168 57
GAS LISTING /tmp/ccWUainM.s 			page 24


 712 0290 93050A00 		mv	a1,s4
 713 0294 97000000 		call	_ZN12SchedulerABI3putEP9ThreadABI@plt
 713      E7800000 
 714              	.LVL50:
 169:src/InterruptRoutine.cpp **** 
 715              		.loc 1 169 28
 716 029c 93071000 		li	a5,1
 717 02a0 6FF01FFD 		j	.L12
 718              	.LVL51:
 719              	.L40:
 720              	.LBE73:
 721              	.LBE97:
 722              	.LBB98:
 723              	.LBB75:
 185:src/InterruptRoutine.cpp ****             int val=a[1];
 724              		.loc 1 185 12 is_stmt 1
 186:src/InterruptRoutine.cpp **** 
 725              		.loc 1 186 13
 186:src/InterruptRoutine.cpp **** 
 726              		.loc 1 186 17 is_stmt 0
 727 02a4 832584F8 		lw	a1,-120(s0)
 728              	.LVL52:
 188:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 729              		.loc 1 188 13 is_stmt 1
 189:src/InterruptRoutine.cpp **** 
 730              		.loc 1 189 13
 189:src/InterruptRoutine.cpp **** 
 731              		.loc 1 189 66 is_stmt 0
 732              	#APP
 733              	# 189 "src/InterruptRoutine.cpp" 1
 734              		csrr  s4, sstatus
 735              	# 0 "" 2
 736              	.LVL53:
 192:src/InterruptRoutine.cpp **** 
 737              		.loc 1 192 13 is_stmt 1
 192:src/InterruptRoutine.cpp **** 
 738              		.loc 1 192 55 is_stmt 0
 739              	#NO_APP
 740 02ac 033504F9 		ld	a0,-112(s0)
 741 02b0 97000000 		call	_ZN12SemaphoreABI10semopenABIEPPS_i@plt
 741      E7800000 
 742              	.LVL54:
 195:src/InterruptRoutine.cpp **** 
 743              		.loc 1 195 13 is_stmt 1
 195:src/InterruptRoutine.cpp **** 
 744              		.loc 1 195 66 is_stmt 0
 745              	#APP
 746              	# 195 "src/InterruptRoutine.cpp" 1
 198:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 747              		csrw sstatus, s4
 748              	# 0 "" 2
 749              		.loc 1 198 13 is_stmt 1
 198:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 750              		.loc 1 198 67 is_stmt 0
 751              	# 198 "src/InterruptRoutine.cpp" 1
 199:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 752              		mv a0, a0
GAS LISTING /tmp/ccWUainM.s 			page 25


 753              	# 0 "" 2
 754              		.loc 1 199 13 is_stmt 1
 199:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 755              		.loc 1 199 62 is_stmt 0
 756              	# 199 "src/InterruptRoutine.cpp" 1
 201:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 757              		sd a0,0x50(s3)
 758              	# 0 "" 2
 759              		.loc 1 201 13 is_stmt 1
 201:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 760              		.loc 1 201 26 is_stmt 0
 761              	#NO_APP
 762 02c4 13094900 		addi	s2,s2,4
 763              	.LVL55:
 202:src/InterruptRoutine.cpp ****         }
 764              		.loc 1 202 13 is_stmt 1
 202:src/InterruptRoutine.cpp ****         }
 765              		.loc 1 202 70 is_stmt 0
 766              	#APP
 767              	# 202 "src/InterruptRoutine.cpp" 1
 768              		csrw sepc, s2
 769              	# 0 "" 2
 770              	#NO_APP
 771              	.LBE75:
 772 02cc 6FF01FE3 		j	.L13
 773              	.LVL56:
 774              	.L41:
 775              	.LBE98:
 776              	.LBB99:
 777              	.LBB77:
 206:src/InterruptRoutine.cpp **** 
 778              		.loc 1 206 13 is_stmt 1
 208:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 779              		.loc 1 208 13
 209:src/InterruptRoutine.cpp **** 
 780              		.loc 1 209 13
 209:src/InterruptRoutine.cpp **** 
 781              		.loc 1 209 66 is_stmt 0
 782              	#APP
 783              	# 209 "src/InterruptRoutine.cpp" 1
 784              		csrr  s4, sstatus
 785              	# 0 "" 2
 786              	.LVL57:
 211:src/InterruptRoutine.cpp **** 
 787              		.loc 1 211 13 is_stmt 1
 211:src/InterruptRoutine.cpp **** 
 788              		.loc 1 211 56 is_stmt 0
 789              	#NO_APP
 790 02d4 033584F8 		ld	a0,-120(s0)
 791 02d8 97000000 		call	_ZN12SemaphoreABI11semcloseABIEPS_@plt
 791      E7800000 
 792              	.LVL58:
 214:src/InterruptRoutine.cpp **** 
 793              		.loc 1 214 13 is_stmt 1
 214:src/InterruptRoutine.cpp **** 
 794              		.loc 1 214 66 is_stmt 0
 795              	#APP
GAS LISTING /tmp/ccWUainM.s 			page 26


 796              	# 214 "src/InterruptRoutine.cpp" 1
 217:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 797              		csrw sstatus, s4
 798              	# 0 "" 2
 799              		.loc 1 217 13 is_stmt 1
 217:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 800              		.loc 1 217 67 is_stmt 0
 801              	# 217 "src/InterruptRoutine.cpp" 1
 218:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 802              		mv a0, a0
 803              	# 0 "" 2
 804              		.loc 1 218 13 is_stmt 1
 218:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 805              		.loc 1 218 62 is_stmt 0
 806              	# 218 "src/InterruptRoutine.cpp" 1
 220:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 807              		sd a0,0x50(s3)
 808              	# 0 "" 2
 809              		.loc 1 220 13 is_stmt 1
 220:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 810              		.loc 1 220 26 is_stmt 0
 811              	#NO_APP
 812 02ec 13094900 		addi	s2,s2,4
 813              	.LVL59:
 221:src/InterruptRoutine.cpp **** 
 814              		.loc 1 221 13 is_stmt 1
 221:src/InterruptRoutine.cpp **** 
 815              		.loc 1 221 70 is_stmt 0
 816              	#APP
 817              	# 221 "src/InterruptRoutine.cpp" 1
 818              		csrw sepc, s2
 819              	# 0 "" 2
 820              	#NO_APP
 821              	.LBE77:
 822 02f4 6FF01FE1 		j	.L14
 823              	.LVL60:
 824              	.L42:
 825              	.LBE99:
 826              	.LBB100:
 827              	.LBB79:
 227:src/InterruptRoutine.cpp **** 
 828              		.loc 1 227 13 is_stmt 1
 229:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 829              		.loc 1 229 13
 230:src/InterruptRoutine.cpp **** 
 830              		.loc 1 230 13
 230:src/InterruptRoutine.cpp **** 
 831              		.loc 1 230 66 is_stmt 0
 832              	#APP
 833              	# 230 "src/InterruptRoutine.cpp" 1
 834              		csrr  s4, sstatus
 835              	# 0 "" 2
 836              	.LVL61:
 233:src/InterruptRoutine.cpp **** 
 837              		.loc 1 233 13 is_stmt 1
 233:src/InterruptRoutine.cpp **** 
 838              		.loc 1 233 55 is_stmt 0
GAS LISTING /tmp/ccWUainM.s 			page 27


 839              	#NO_APP
 840 02fc 033584F8 		ld	a0,-120(s0)
 841 0300 97000000 		call	_ZN12SemaphoreABI10semwaitABIEPS_@plt
 841      E7800000 
 842              	.LVL62:
 236:src/InterruptRoutine.cpp **** 
 843              		.loc 1 236 13 is_stmt 1
 236:src/InterruptRoutine.cpp **** 
 844              		.loc 1 236 66 is_stmt 0
 845              	#APP
 846              	# 236 "src/InterruptRoutine.cpp" 1
 239:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 847              		csrw sstatus, s4
 848              	# 0 "" 2
 849              		.loc 1 239 13 is_stmt 1
 239:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 850              		.loc 1 239 67 is_stmt 0
 851              	# 239 "src/InterruptRoutine.cpp" 1
 240:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 852              		mv a0, a0
 853              	# 0 "" 2
 854              		.loc 1 240 13 is_stmt 1
 240:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 855              		.loc 1 240 62 is_stmt 0
 856              	# 240 "src/InterruptRoutine.cpp" 1
 242:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 857              		sd a0,0x50(s3)
 858              	# 0 "" 2
 859              		.loc 1 242 13 is_stmt 1
 242:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 860              		.loc 1 242 26 is_stmt 0
 861              	#NO_APP
 862 0314 13094900 		addi	s2,s2,4
 863              	.LVL63:
 243:src/InterruptRoutine.cpp **** 
 864              		.loc 1 243 13 is_stmt 1
 243:src/InterruptRoutine.cpp **** 
 865              		.loc 1 243 70 is_stmt 0
 866              	#APP
 867              	# 243 "src/InterruptRoutine.cpp" 1
 868              		csrw sepc, s2
 869              	# 0 "" 2
 870              	#NO_APP
 871              	.LBE79:
 872 031c 6FF01FDF 		j	.L15
 873              	.LVL64:
 874              	.L43:
 875              	.LBE100:
 876              	.LBB101:
 877              	.LBB81:
 250:src/InterruptRoutine.cpp **** 
 878              		.loc 1 250 13 is_stmt 1
 252:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 879              		.loc 1 252 13
 253:src/InterruptRoutine.cpp **** 
 880              		.loc 1 253 13
 253:src/InterruptRoutine.cpp **** 
GAS LISTING /tmp/ccWUainM.s 			page 28


 881              		.loc 1 253 66 is_stmt 0
 882              	#APP
 883              	# 253 "src/InterruptRoutine.cpp" 1
 884              		csrr  s4, sstatus
 885              	# 0 "" 2
 886              	.LVL65:
 255:src/InterruptRoutine.cpp **** 
 887              		.loc 1 255 13 is_stmt 1
 255:src/InterruptRoutine.cpp **** 
 888              		.loc 1 255 60 is_stmt 0
 889              	#NO_APP
 890 0324 033584F8 		ld	a0,-120(s0)
 891 0328 97000000 		call	_ZN12SemaphoreABI12semsignalABIEPS_@plt
 891      E7800000 
 892              	.LVL66:
 257:src/InterruptRoutine.cpp **** 
 893              		.loc 1 257 13 is_stmt 1
 257:src/InterruptRoutine.cpp **** 
 894              		.loc 1 257 66 is_stmt 0
 895              	#APP
 896              	# 257 "src/InterruptRoutine.cpp" 1
 261:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 897              		csrw sstatus, s4
 898              	# 0 "" 2
 899              		.loc 1 261 13 is_stmt 1
 261:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 900              		.loc 1 261 67 is_stmt 0
 901              	# 261 "src/InterruptRoutine.cpp" 1
 262:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 902              		mv a0, a0
 903              	# 0 "" 2
 904              		.loc 1 262 13 is_stmt 1
 262:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 905              		.loc 1 262 62 is_stmt 0
 906              	# 262 "src/InterruptRoutine.cpp" 1
 264:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 907              		sd a0,0x50(s3)
 908              	# 0 "" 2
 909              		.loc 1 264 13 is_stmt 1
 264:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 910              		.loc 1 264 26 is_stmt 0
 911              	#NO_APP
 912 033c 13094900 		addi	s2,s2,4
 913              	.LVL67:
 265:src/InterruptRoutine.cpp **** 
 914              		.loc 1 265 13 is_stmt 1
 265:src/InterruptRoutine.cpp **** 
 915              		.loc 1 265 70 is_stmt 0
 916              	#APP
 917              	# 265 "src/InterruptRoutine.cpp" 1
 918              		csrw sepc, s2
 919              	# 0 "" 2
 920              	#NO_APP
 921              	.LBE81:
 922 0344 6FF01FDD 		j	.L16
 923              	.LVL68:
 924              	.L44:
GAS LISTING /tmp/ccWUainM.s 			page 29


 925              	.LBE101:
 926              	.LBB102:
 927              	.LBB83:
 271:src/InterruptRoutine.cpp **** 
 928              		.loc 1 271 13 is_stmt 1
 271:src/InterruptRoutine.cpp **** 
 929              		.loc 1 271 20 is_stmt 0
 930 0348 833A84F8 		ld	s5,-120(s0)
 931              	.LVL69:
 273:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 932              		.loc 1 273 13 is_stmt 1
 274:src/InterruptRoutine.cpp **** 
 933              		.loc 1 274 13
 274:src/InterruptRoutine.cpp **** 
 934              		.loc 1 274 66 is_stmt 0
 935              	#APP
 936              	# 274 "src/InterruptRoutine.cpp" 1
 937              		csrr  s4, sstatus
 938              	# 0 "" 2
 939              	.LVL70:
 276:src/InterruptRoutine.cpp **** 
 940              		.loc 1 276 13 is_stmt 1
 276:src/InterruptRoutine.cpp **** 
 941              		.loc 1 276 48 is_stmt 0
 942              	#NO_APP
 943 0350 97000000 		call	_ZN12SchedulerABI20getInstanceSchedulerEv@plt
 943      E7800000 
 944              	.LVL71:
 276:src/InterruptRoutine.cpp **** 
 945              		.loc 1 276 60
 946 0358 13850A00 		mv	a0,s5
 947 035c 97000000 		call	_ZN12SchedulerABI5sleepEm@plt
 947      E7800000 
 948              	.LVL72:
 278:src/InterruptRoutine.cpp **** 
 949              		.loc 1 278 13 is_stmt 1
 278:src/InterruptRoutine.cpp **** 
 950              		.loc 1 278 66 is_stmt 0
 951              	#APP
 952              	# 278 "src/InterruptRoutine.cpp" 1
 282:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 953              		csrw sstatus, s4
 954              	# 0 "" 2
 955              		.loc 1 282 13 is_stmt 1
 282:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 956              		.loc 1 282 26 is_stmt 0
 957              	#NO_APP
 958 0368 13094900 		addi	s2,s2,4
 959              	.LVL73:
 283:src/InterruptRoutine.cpp **** 
 960              		.loc 1 283 13 is_stmt 1
 283:src/InterruptRoutine.cpp **** 
 961              		.loc 1 283 70 is_stmt 0
 962              	#APP
 963              	# 283 "src/InterruptRoutine.cpp" 1
 964              		csrw sepc, s2
 965              	# 0 "" 2
GAS LISTING /tmp/ccWUainM.s 			page 30


 966              	#NO_APP
 967              	.LBE83:
 968 0370 6FF0DFDA 		j	.L17
 969              	.LVL74:
 970              	.L45:
 971              	.LBE102:
 972              	.LBB103:
 973              	.LBB85:
 289:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 974              		.loc 1 289 13 is_stmt 1
 290:src/InterruptRoutine.cpp ****             char ret=BufferPrinting::bout->get();
 975              		.loc 1 290 13
 290:src/InterruptRoutine.cpp ****             char ret=BufferPrinting::bout->get();
 976              		.loc 1 290 66 is_stmt 0
 977              	#APP
 978              	# 290 "src/InterruptRoutine.cpp" 1
 979              		csrr  s4, sstatus
 980              	# 0 "" 2
 981              	.LVL75:
 291:src/InterruptRoutine.cpp ****             __asm__ volatile("mv a0, %0" : : "r" ( ret));
 982              		.loc 1 291 13 is_stmt 1
 291:src/InterruptRoutine.cpp ****             __asm__ volatile("mv a0, %0" : : "r" ( ret));
 983              		.loc 1 291 47 is_stmt 0
 984              	#NO_APP
 985 0378 97070000 		la	a5,_ZN14BufferPrinting4boutE
 985      83B70700 
 986 0380 03B50700 		ld	a0,0(a5)
 987 0384 97000000 		call	_ZN14BufferPrinting3getEv@plt
 987      E7800000 
 988              	.LVL76:
 292:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 989              		.loc 1 292 13 is_stmt 1
 292:src/InterruptRoutine.cpp ****             __asm__ volatile("sd a0,0x50(%0)" : : "r"(retsp));
 990              		.loc 1 292 57 is_stmt 0
 991              	#APP
 992              	# 292 "src/InterruptRoutine.cpp" 1
 293:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 993              		mv a0, a0
 994              	# 0 "" 2
 995              		.loc 1 293 13 is_stmt 1
 293:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 996              		.loc 1 293 62 is_stmt 0
 997              	# 293 "src/InterruptRoutine.cpp" 1
 294:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 998              		sd a0,0x50(s3)
 999              	# 0 "" 2
 1000              		.loc 1 294 13 is_stmt 1
 294:src/InterruptRoutine.cpp ****             //ecall cuva vrijednost trenutnog pc ne sledece instrukcije
 1001              		.loc 1 294 66 is_stmt 0
 1002              	# 294 "src/InterruptRoutine.cpp" 1
 296:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 1003              		csrw sstatus, s4
 1004              	# 0 "" 2
 1005              		.loc 1 296 13 is_stmt 1
 296:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 1006              		.loc 1 296 26 is_stmt 0
 1007              	#NO_APP
GAS LISTING /tmp/ccWUainM.s 			page 31


 1008 0398 13094900 		addi	s2,s2,4
 1009              	.LVL77:
 297:src/InterruptRoutine.cpp **** 
 1010              		.loc 1 297 13 is_stmt 1
 297:src/InterruptRoutine.cpp **** 
 1011              		.loc 1 297 70 is_stmt 0
 1012              	#APP
 1013              	# 297 "src/InterruptRoutine.cpp" 1
 1014              		csrw sepc, s2
 1015              	# 0 "" 2
 1016              	#NO_APP
 1017              	.LBE85:
 1018 03a0 6FF05FD8 		j	.L18
 1019              	.LVL78:
 1020              	.L46:
 1021              	.LBE103:
 1022              	.LBB104:
 1023              	.LBB87:
 302:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 1024              		.loc 1 302 13 is_stmt 1
 302:src/InterruptRoutine.cpp ****             uint64 savesstatus;
 1025              		.loc 1 302 18 is_stmt 0
 1026 03a4 834584F8 		lbu	a1,-120(s0)
 1027              	.LVL79:
 303:src/InterruptRoutine.cpp ****             asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 1028              		.loc 1 303 13 is_stmt 1
 304:src/InterruptRoutine.cpp ****             BufferPrinting::bin->put(c);
 1029              		.loc 1 304 13
 304:src/InterruptRoutine.cpp ****             BufferPrinting::bin->put(c);
 1030              		.loc 1 304 66 is_stmt 0
 1031              	#APP
 1032              	# 304 "src/InterruptRoutine.cpp" 1
 1033              		csrr  s3, sstatus
 1034              	# 0 "" 2
 1035              	.LVL80:
 305:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 1036              		.loc 1 305 13 is_stmt 1
 305:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r"(savesstatus));
 1037              		.loc 1 305 37 is_stmt 0
 1038              	#NO_APP
 1039 03ac 97070000 		la	a5,_ZN14BufferPrinting3binE
 1039      83B70700 
 1040 03b4 03B50700 		ld	a0,0(a5)
 1041 03b8 97000000 		call	_ZN14BufferPrinting3putEc@plt
 1041      E7800000 
 1042              	.LVL81:
 306:src/InterruptRoutine.cpp **** 
 1043              		.loc 1 306 13 is_stmt 1
 306:src/InterruptRoutine.cpp **** 
 1044              		.loc 1 306 66 is_stmt 0
 1045              	#APP
 1046              	# 306 "src/InterruptRoutine.cpp" 1
 308:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 1047              		csrw sstatus, s3
 1048              	# 0 "" 2
 1049              		.loc 1 308 13 is_stmt 1
 308:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
GAS LISTING /tmp/ccWUainM.s 			page 32


 1050              		.loc 1 308 26 is_stmt 0
 1051              	#NO_APP
 1052 03c4 13094900 		addi	s2,s2,4
 1053              	.LVL82:
 309:src/InterruptRoutine.cpp **** 
 1054              		.loc 1 309 13 is_stmt 1
 309:src/InterruptRoutine.cpp **** 
 1055              		.loc 1 309 70 is_stmt 0
 1056              	#APP
 1057              	# 309 "src/InterruptRoutine.cpp" 1
 1058              		csrw sepc, s2
 1059              	# 0 "" 2
 1060              	#NO_APP
 1061              	.LBE87:
 1062 03cc 6FF01FD6 		j	.L19
 1063              	.LVL83:
 1064              	.L47:
 1065              	.LBE104:
 1066              	.LBB105:
 1067              	.LBB89:
 315:src/InterruptRoutine.cpp ****             asm volatile("csrr %0, sstatus" : "=r" (temp));
 1068              		.loc 1 315 13 is_stmt 1
 316:src/InterruptRoutine.cpp ****             temp &= ~0x100;
 1069              		.loc 1 316 13
 316:src/InterruptRoutine.cpp ****             temp &= ~0x100;
 1070              		.loc 1 316 59 is_stmt 0
 1071              	#APP
 1072              	# 316 "src/InterruptRoutine.cpp" 1
 1073              		csrr a5, sstatus
 1074              	# 0 "" 2
 1075              	.LVL84:
 317:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r" (temp));
 1076              		.loc 1 317 13 is_stmt 1
 317:src/InterruptRoutine.cpp ****             asm volatile("csrw sstatus, %0" : : "r" (temp));
 1077              		.loc 1 317 18 is_stmt 0
 1078              	#NO_APP
 1079 03d4 93F7F7EF 		andi	a5,a5,-257
 1080              	.LVL85:
 318:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 1081              		.loc 1 318 13 is_stmt 1
 318:src/InterruptRoutine.cpp ****             incrementedpc+=4;
 1082              		.loc 1 318 60 is_stmt 0
 1083              	#APP
 1084              	# 318 "src/InterruptRoutine.cpp" 1
 319:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 1085              		csrw sstatus, a5
 1086              	# 0 "" 2
 1087              		.loc 1 319 13 is_stmt 1
 319:src/InterruptRoutine.cpp ****             __asm__ volatile("csrw sepc, %0" : : "r" (incrementedpc));
 1088              		.loc 1 319 26 is_stmt 0
 1089              	#NO_APP
 1090 03dc 13094900 		addi	s2,s2,4
 1091              	.LVL86:
 320:src/InterruptRoutine.cpp ****         }
 1092              		.loc 1 320 13 is_stmt 1
 320:src/InterruptRoutine.cpp ****         }
 1093              		.loc 1 320 70 is_stmt 0
GAS LISTING /tmp/ccWUainM.s 			page 33


 1094              	#APP
 1095              	# 320 "src/InterruptRoutine.cpp" 1
 1096              		csrw sepc, s2
 1097              	# 0 "" 2
 1098              	#NO_APP
 1099              	.LBE89:
 1100 03e4 6FF01FD5 		j	.L20
 1101              	.LVL87:
 1102              	.L32:
 1103              	.LBE105:
 1104              	.LBE124:
 354:src/InterruptRoutine.cpp ****             uint8 *num=(uint8*)CONSOLE_STATUS;
 1105              		.loc 1 354 9 is_stmt 1
 1106              	.LBB125:
 1107              	.LBB106:
 1108              	.LBB53:
 354:src/InterruptRoutine.cpp ****             uint8 *num=(uint8*)CONSOLE_STATUS;
 1109              		.loc 1 354 22 is_stmt 0
 1110 03e8 97000000 		call	plic_claim@plt
 1110      E7800000 
 1111              	.LVL88:
 354:src/InterruptRoutine.cpp ****             uint8 *num=(uint8*)CONSOLE_STATUS;
 1112              		.loc 1 354 9
 1113 03f0 9307A000 		li	a5,10
 1114 03f4 E318F5CA 		bne	a0,a5,.L3
 1115              	.LBB54:
 355:src/InterruptRoutine.cpp **** 
 1116              		.loc 1 355 13 is_stmt 1
 355:src/InterruptRoutine.cpp **** 
 1117              		.loc 1 355 20 is_stmt 0
 1118 03f8 97070000 		la	a5,CONSOLE_STATUS
 1118      83B70700 
 1119 0400 83B40700 		ld	s1,0(a5)
 1120              	.LVL89:
 357:src/InterruptRoutine.cpp ****                 SemaphoreABI::semsignalABI(BufferPrinting::out);
 1121              		.loc 1 357 13 is_stmt 1
 357:src/InterruptRoutine.cpp ****                 SemaphoreABI::semsignalABI(BufferPrinting::out);
 1122              		.loc 1 357 17 is_stmt 0
 1123 0404 83C70400 		lbu	a5,0(s1)
 357:src/InterruptRoutine.cpp ****                 SemaphoreABI::semsignalABI(BufferPrinting::out);
 1124              		.loc 1 357 13
 1125 0408 93F71700 		andi	a5,a5,1
 1126 040c 63900702 		bnez	a5,.L50
 1127              	.L23:
 361:src/InterruptRoutine.cpp ****                 //putc
 1128              		.loc 1 361 13 is_stmt 1
 361:src/InterruptRoutine.cpp ****                 //putc
 1129              		.loc 1 361 17 is_stmt 0
 1130 0410 83C70400 		lbu	a5,0(s1)
 361:src/InterruptRoutine.cpp ****                 //putc
 1131              		.loc 1 361 13
 1132 0414 93F70702 		andi	a5,a5,32
 1133 0418 63960702 		bnez	a5,.L51
 1134              	.L24:
 367:src/InterruptRoutine.cpp ****         }
 1135              		.loc 1 367 13 is_stmt 1
 367:src/InterruptRoutine.cpp ****         }
GAS LISTING /tmp/ccWUainM.s 			page 34


 1136              		.loc 1 367 26 is_stmt 0
 1137 041c 1305A000 		li	a0,10
 1138 0420 97000000 		call	plic_complete@plt
 1138      E7800000 
 1139              	.LVL90:
 1140 0428 6FF0DFC7 		j	.L3
 1141              	.L50:
 358:src/InterruptRoutine.cpp **** 
 1142              		.loc 1 358 17 is_stmt 1
 358:src/InterruptRoutine.cpp **** 
 1143              		.loc 1 358 43 is_stmt 0
 1144 042c 97070000 		la	a5,_ZN14BufferPrinting3outE
 1144      83B70700 
 1145 0434 03B50700 		ld	a0,0(a5)
 1146 0438 97000000 		call	_ZN12SemaphoreABI12semsignalABIEPS_@plt
 1146      E7800000 
 1147              	.LVL91:
 1148 0440 6FF01FFD 		j	.L23
 1149              	.L51:
 363:src/InterruptRoutine.cpp **** 
 1150              		.loc 1 363 16 is_stmt 1
 363:src/InterruptRoutine.cpp **** 
 1151              		.loc 1 363 42 is_stmt 0
 1152 0444 97070000 		la	a5,_ZN14BufferPrinting2inE
 1152      83B70700 
 1153 044c 03B50700 		ld	a0,0(a5)
 1154 0450 97000000 		call	_ZN12SemaphoreABI12semsignalABIEPS_@plt
 1154      E7800000 
 1155              	.LVL92:
 1156 0458 6FF05FFC 		j	.L24
 1157              	.LVL93:
 1158              	.L33:
 1159              	.LBE54:
 1160              	.LBE53:
 1161              	.LBB55:
 1162              	.LBB47:
 372:src/InterruptRoutine.cpp **** 
 1163              		.loc 1 372 9 is_stmt 1
 372:src/InterruptRoutine.cpp **** 
 1164              		.loc 1 372 38 is_stmt 0
 1165              	#APP
 1166              	# 372 "src/InterruptRoutine.cpp" 1
 374:src/InterruptRoutine.cpp ****         asm volatile("csrr %0, sepc" : "=r"(savedSEPC));
 1167              		csrc sip,0x02
 1168              	# 0 "" 2
 1169              		.loc 1 374 9 is_stmt 1
 375:src/InterruptRoutine.cpp ****         uint64 savesstatus;
 1170              		.loc 1 375 9
 375:src/InterruptRoutine.cpp ****         uint64 savesstatus;
 1171              		.loc 1 375 56 is_stmt 0
 1172              	# 375 "src/InterruptRoutine.cpp" 1
 1173              		csrr s2, sepc
 1174              	# 0 "" 2
 1175              	.LVL94:
 376:src/InterruptRoutine.cpp ****         asm volatile("csrr  %0, sstatus" : "=r"(savesstatus));
 1176              		.loc 1 376 9 is_stmt 1
 377:src/InterruptRoutine.cpp ****         //ovo vadi niti iz sleep
GAS LISTING /tmp/ccWUainM.s 			page 35


 1177              		.loc 1 377 9
 377:src/InterruptRoutine.cpp ****         //ovo vadi niti iz sleep
 1178              		.loc 1 377 62 is_stmt 0
 1179              	# 377 "src/InterruptRoutine.cpp" 1
 1180              		csrr  s3, sstatus
 1181              	# 0 "" 2
 1182              	.LVL95:
 379:src/InterruptRoutine.cpp ****         while (tmp){
 1183              		.loc 1 379 9 is_stmt 1
 379:src/InterruptRoutine.cpp ****         while (tmp){
 1184              		.loc 1 379 20 is_stmt 0
 1185              	#NO_APP
 1186 0468 97070000 		la	a5,_ZN12SchedulerABI9headsleepE
 1186      83B70700 
 1187 0470 83B40700 		ld	s1,0(a5)
 1188              	.LVL96:
 1189 0474 6F000003 		j	.L27
 1190              	.LVL97:
 1191              	.L52:
 382:src/InterruptRoutine.cpp ****                 SchedulerABI::getInstanceScheduler().put(tmp);
 1192              		.loc 1 382 17 is_stmt 1
 382:src/InterruptRoutine.cpp ****                 SchedulerABI::getInstanceScheduler().put(tmp);
 1193              		.loc 1 382 66 is_stmt 0
 1194 0478 97070000 		la	a5,_ZN12SchedulerABI9headsleepE
 1194      83B70700 
 1195 0480 03B70700 		ld	a4,0(a5)
 1196 0484 03370700 		ld	a4,0(a4)
 382:src/InterruptRoutine.cpp ****                 SchedulerABI::getInstanceScheduler().put(tmp);
 1197              		.loc 1 382 40
 1198 0488 23B0E700 		sd	a4,0(a5)
 383:src/InterruptRoutine.cpp **** 
 1199              		.loc 1 383 17 is_stmt 1
 383:src/InterruptRoutine.cpp **** 
 1200              		.loc 1 383 52 is_stmt 0
 1201 048c 97000000 		call	_ZN12SchedulerABI20getInstanceSchedulerEv@plt
 1201      E7800000 
 1202              	.LVL98:
 383:src/InterruptRoutine.cpp **** 
 1203              		.loc 1 383 57
 1204 0494 93850400 		mv	a1,s1
 1205 0498 97000000 		call	_ZN12SchedulerABI3putEP9ThreadABI@plt
 1205      E7800000 
 1206              	.LVL99:
 1207              	.L26:
 386:src/InterruptRoutine.cpp ****         }
 1208              		.loc 1 386 13 is_stmt 1
 386:src/InterruptRoutine.cpp ****         }
 1209              		.loc 1 386 16 is_stmt 0
 1210 04a0 83B40400 		ld	s1,0(s1)
 1211              	.LVL100:
 1212              	.L27:
 380:src/InterruptRoutine.cpp ****             if(tmp->decrementsleep()==0){
 1213              		.loc 1 380 9 is_stmt 1
 380:src/InterruptRoutine.cpp ****             if(tmp->decrementsleep()==0){
 1214              		.loc 1 380 16
 1215 04a4 638C0400 		beqz	s1,.L25
 381:src/InterruptRoutine.cpp ****                 SchedulerABI::headsleep=SchedulerABI::headsleep->next;
GAS LISTING /tmp/ccWUainM.s 			page 36


 1216              		.loc 1 381 13
 381:src/InterruptRoutine.cpp ****                 SchedulerABI::headsleep=SchedulerABI::headsleep->next;
 1217              		.loc 1 381 35 is_stmt 0
 1218 04a8 13850400 		mv	a0,s1
 1219 04ac 97000000 		call	_ZN9ThreadABI14decrementsleepEv@plt
 1219      E7800000 
 1220              	.LVL101:
 381:src/InterruptRoutine.cpp ****                 SchedulerABI::headsleep=SchedulerABI::headsleep->next;
 1221              		.loc 1 381 13
 1222 04b4 E31605FE 		bnez	a0,.L26
 1223 04b8 6FF01FFC 		j	.L52
 1224              	.L25:
 390:src/InterruptRoutine.cpp ****             ThreadABI::running->timeSliceCounterSet();
 1225              		.loc 1 390 9 is_stmt 1
 390:src/InterruptRoutine.cpp ****             ThreadABI::running->timeSliceCounterSet();
 1226              		.loc 1 390 57 is_stmt 0
 1227 04bc 97070000 		la	a5,_ZN9ThreadABI7runningE
 1227      83B70700 
 1228 04c4 03B70700 		ld	a4,0(a5)
 1229              	.LVL102:
 1230              	.LBB48:
 1231              	.LBB49:
  42:src/../h/ThreadABI.hpp **** 
 1232              		.loc 2 42 38 is_stmt 1
  42:src/../h/ThreadABI.hpp **** 
 1233              		.loc 2 42 47 is_stmt 0
 1234 04c8 83370704 		ld	a5,64(a4)
  42:src/../h/ThreadABI.hpp **** 
 1235              		.loc 2 42 45
 1236 04cc 9387F7FF 		addi	a5,a5,-1
  42:src/../h/ThreadABI.hpp **** 
 1237              		.loc 2 42 47
 1238 04d0 2330F704 		sd	a5,64(a4)
 1239 04d4 9B870700 		sext.w	a5,a5
 1240              	.LVL103:
 1241              	.LBE49:
 1242              	.LBE48:
 390:src/InterruptRoutine.cpp ****             ThreadABI::running->timeSliceCounterSet();
 1243              		.loc 1 390 9
 1244 04d8 63880700 		beqz	a5,.L53
 1245              	.L28:
 395:src/InterruptRoutine.cpp **** 
 1246              		.loc 1 395 9 is_stmt 1
 395:src/InterruptRoutine.cpp **** 
 1247              		.loc 1 395 62 is_stmt 0
 1248              	#APP
 1249              	# 395 "src/InterruptRoutine.cpp" 1
 398:src/InterruptRoutine.cpp **** 
 1250              		csrw sstatus, s3
 1251              	# 0 "" 2
 1252              		.loc 1 398 9 is_stmt 1
 398:src/InterruptRoutine.cpp **** 
 1253              		.loc 1 398 57 is_stmt 0
 1254              	# 398 "src/InterruptRoutine.cpp" 1
 1255              		csrw sepc, s2
 1256              	# 0 "" 2
 1257              	#NO_APP
GAS LISTING /tmp/ccWUainM.s 			page 37


 1258              	.LBE47:
 1259              	.LBE55:
 1260              	.LBE106:
 1261              	.LBE125:
 1262              		.loc 1 407 1
 1263 04e4 6FF01FBC 		j	.L3
 1264              	.L53:
 1265              	.LBB126:
 1266              	.LBB107:
 1267              	.LBB56:
 1268              	.LBB52:
 391:src/InterruptRoutine.cpp ****             ThreadABI::yield();
 1269              		.loc 1 391 13 is_stmt 1
 1270              	.LVL104:
 1271              	.LBB50:
 1272              	.LBB51:
  46:src/../h/ThreadABI.hpp ****      bool timeSliceEnd(){ return 0==timeSliceCounter; }
 1273              		.loc 2 46 33
  46:src/../h/ThreadABI.hpp ****      bool timeSliceEnd(){ return 0==timeSliceCounter; }
 1274              		.loc 2 46 49 is_stmt 0
 1275 04e8 93072000 		li	a5,2
 1276 04ec 2330F704 		sd	a5,64(a4)
 1277              	.LVL105:
 1278              	.LBE51:
 1279              	.LBE50:
 392:src/InterruptRoutine.cpp **** 
 1280              		.loc 1 392 13 is_stmt 1
 392:src/InterruptRoutine.cpp **** 
 1281              		.loc 1 392 29 is_stmt 0
 1282 04f0 97000000 		call	_ZN9ThreadABI5yieldEv@plt
 1282      E7800000 
 1283              	.LVL106:
 1284 04f8 6FF05FFE 		j	.L28
 1285              	.LBE52:
 1286              	.LBE56:
 1287              	.LBE107:
 1288              	.LBE126:
 1289              		.cfi_endproc
 1290              	.LFE42:
 1292              	.Letext0:
 1293              		.file 3 "src/../h/../lib/hw.h"
 1294              		.file 4 "src/../h/MemoryAllocator.hpp"
 1295              		.file 5 "src/../h/SchedulerABI.hpp"
 1296              		.file 6 "src/../h/SemaphoreABI.hpp"
 1297              		.file 7 "src/../h/BufferPrinting.hpp"
 1298              		.file 8 "src/../test/../h/syscall_c.h"
GAS LISTING /tmp/ccWUainM.s 			page 38


DEFINED SYMBOLS
                            *ABS*:0000000000000000 InterruptRoutine.cpp
     /tmp/ccWUainM.s:9      .text:0000000000000000 _ZN9ThreadABI10popSppSpieEv
     /tmp/ccWUainM.s:13     .text:0000000000000000 .L0 
     /tmp/ccWUainM.s:14     .text:0000000000000000 .L0 
     /tmp/ccWUainM.s:15     .text:0000000000000004 .L0 
     /tmp/ccWUainM.s:17     .text:0000000000000008 .L0 
     /tmp/ccWUainM.s:19     .text:000000000000000c .L0 
     /tmp/ccWUainM.s:21     .text:000000000000000c .L0 
src/InterruptRoutine.cpp:10     .text:000000000000000c .L0 
     /tmp/ccWUainM.s:27     .text:0000000000000010 .L0 
src/InterruptRoutine.cpp:11     .text:0000000000000010 .L0 
     /tmp/ccWUainM.s:32     .text:0000000000000014 .L0 
src/InterruptRoutine.cpp:12     .text:0000000000000014 .L0 
     /tmp/ccWUainM.s:38     .text:0000000000000018 .L0 
     /tmp/ccWUainM.s:39     .text:000000000000001c .L0 
     /tmp/ccWUainM.s:40     .text:000000000000001c .L0 
     /tmp/ccWUainM.s:42     .text:0000000000000020 .L0 
     /tmp/ccWUainM.s:44     .text:0000000000000024 .L0 
     /tmp/ccWUainM.s:50     .text:0000000000000024 handleSupervisorTrap
     /tmp/ccWUainM.s:53     .text:0000000000000024 .L0 
     /tmp/ccWUainM.s:54     .text:0000000000000024 .L0 
     /tmp/ccWUainM.s:55     .text:0000000000000028 .L0 
     /tmp/ccWUainM.s:63     .text:0000000000000044 .L0 
     /tmp/ccWUainM.s:64     .text:0000000000000044 .L0 
     /tmp/ccWUainM.s:65     .text:0000000000000044 .L0 
     /tmp/ccWUainM.s:66     .text:0000000000000044 .L0 
     /tmp/ccWUainM.s:67     .text:0000000000000044 .L0 
     /tmp/ccWUainM.s:68     .text:0000000000000044 .L0 
     /tmp/ccWUainM.s:69     .text:0000000000000044 .L0 
     /tmp/ccWUainM.s:71     .text:0000000000000048 .L0 
     /tmp/ccWUainM.s:73     .text:0000000000000048 .L0 
     /tmp/ccWUainM.s:74     .text:0000000000000048 .L0 
     /tmp/ccWUainM.s:75     .text:0000000000000048 .L0 
src/InterruptRoutine.cpp:19     .text:0000000000000048 .L0 
     /tmp/ccWUainM.s:81     .text:000000000000004c .L0 
src/InterruptRoutine.cpp:20     .text:000000000000004c .L0 
     /tmp/ccWUainM.s:86     .text:0000000000000050 .L0 
src/InterruptRoutine.cpp:21     .text:0000000000000050 .L0 
     /tmp/ccWUainM.s:91     .text:0000000000000054 .L0 
src/InterruptRoutine.cpp:22     .text:0000000000000054 .L0 
     /tmp/ccWUainM.s:96     .text:0000000000000058 .L0 
src/InterruptRoutine.cpp:23     .text:0000000000000058 .L0 
     /tmp/ccWUainM.s:101    .text:000000000000005c .L0 
src/InterruptRoutine.cpp:24     .text:000000000000005c .L0 
     /tmp/ccWUainM.s:106    .text:0000000000000060 .L0 
src/InterruptRoutine.cpp:25     .text:0000000000000060 .L0 
     /tmp/ccWUainM.s:111    .text:0000000000000064 .L0 
src/InterruptRoutine.cpp:26     .text:0000000000000064 .L0 
     /tmp/ccWUainM.s:117    .text:0000000000000068 .L0 
     /tmp/ccWUainM.s:118    .text:0000000000000068 .L0 
     /tmp/ccWUainM.s:119    .text:0000000000000068 .L0 
src/InterruptRoutine.cpp:31     .text:0000000000000068 .L0 
     /tmp/ccWUainM.s:125    .text:000000000000006c .L0 
     /tmp/ccWUainM.s:126    .text:000000000000006c .L0 
src/InterruptRoutine.cpp:34     .text:000000000000006c .L0 
     /tmp/ccWUainM.s:132    .text:0000000000000070 .L0 
GAS LISTING /tmp/ccWUainM.s 			page 39


     /tmp/ccWUainM.s:133    .text:0000000000000070 .L0 
     /tmp/ccWUainM.s:135    .text:0000000000000070 .L0 
     /tmp/ccWUainM.s:138    .text:0000000000000074 .L0 
src/InterruptRoutine.cpp:38     .text:0000000000000074 .L0 
     /tmp/ccWUainM.s:147    .text:0000000000000078 .L0 
     /tmp/ccWUainM.s:148    .text:0000000000000078 .L0 
     /tmp/ccWUainM.s:150    .text:000000000000007c .L0 
     /tmp/ccWUainM.s:156    .text:0000000000000084 .L0 
     /tmp/ccWUainM.s:166    .text:0000000000000094 .L0 
     /tmp/ccWUainM.s:176    .text:00000000000000a4 .L0 
     /tmp/ccWUainM.s:177    .text:00000000000000a8 .L0 
     /tmp/ccWUainM.s:178    .text:00000000000000a8 .L0 
     /tmp/ccWUainM.s:180    .text:00000000000000ac .L0 
     /tmp/ccWUainM.s:181    .text:00000000000000ac .L0 
     /tmp/ccWUainM.s:183    .text:00000000000000b0 .L0 
     /tmp/ccWUainM.s:185    .text:00000000000000b4 .L0 
     /tmp/ccWUainM.s:187    .text:00000000000000b8 .L0 
     /tmp/ccWUainM.s:189    .text:00000000000000bc .L0 
     /tmp/ccWUainM.s:191    .text:00000000000000c0 .L0 
     /tmp/ccWUainM.s:193    .text:00000000000000c4 .L0 
     /tmp/ccWUainM.s:198    .text:00000000000000c8 .L0 
     /tmp/ccWUainM.s:202    .text:00000000000000c8 .L0 
     /tmp/ccWUainM.s:210    .text:00000000000000cc .L0 
     /tmp/ccWUainM.s:218    .text:00000000000000d4 .L0 
     /tmp/ccWUainM.s:226    .text:00000000000000dc .L0 
     /tmp/ccWUainM.s:234    .text:00000000000000e4 .L0 
     /tmp/ccWUainM.s:242    .text:00000000000000ec .L0 
     /tmp/ccWUainM.s:250    .text:00000000000000f4 .L0 
     /tmp/ccWUainM.s:258    .text:00000000000000fc .L0 
     /tmp/ccWUainM.s:266    .text:0000000000000104 .L0 
     /tmp/ccWUainM.s:274    .text:000000000000010c .L0 
     /tmp/ccWUainM.s:282    .text:0000000000000114 .L0 
     /tmp/ccWUainM.s:290    .text:000000000000011c .L0 
     /tmp/ccWUainM.s:298    .text:0000000000000124 .L0 
     /tmp/ccWUainM.s:307    .text:000000000000012c .L0 
     /tmp/ccWUainM.s:315    .text:0000000000000134 .L0 
     /tmp/ccWUainM.s:319    .text:000000000000013c .L0 
     /tmp/ccWUainM.s:320    .text:000000000000013c .L0 
src/InterruptRoutine.cpp:326    .text:000000000000013c .L0 
     /tmp/ccWUainM.s:327    .text:0000000000000140 .L0 
     /tmp/ccWUainM.s:329    .text:0000000000000140 .L0 
     /tmp/ccWUainM.s:332    .text:0000000000000144 .L0 
src/InterruptRoutine.cpp:328    .text:0000000000000144 .L0 
     /tmp/ccWUainM.s:338    .text:0000000000000148 .L0 
     /tmp/ccWUainM.s:340    .text:0000000000000148 .L0 
     /tmp/ccWUainM.s:343    .text:000000000000014c .L0 
src/InterruptRoutine.cpp:330    .text:000000000000014c .L0 
     /tmp/ccWUainM.s:357    .text:0000000000000154 .L0 
     /tmp/ccWUainM.s:358    .text:0000000000000154 .L0 
     /tmp/ccWUainM.s:361    .text:0000000000000158 .L0 
     /tmp/ccWUainM.s:362    .text:0000000000000158 .L0 
src/InterruptRoutine.cpp:49     .text:0000000000000158 .L0 
     /tmp/ccWUainM.s:369    .text:000000000000015c .L0 
     /tmp/ccWUainM.s:371    .text:000000000000015c .L0 
     /tmp/ccWUainM.s:374    .text:0000000000000164 .L0 
     /tmp/ccWUainM.s:378    .text:0000000000000170 .L0 
src/InterruptRoutine.cpp:54     .text:0000000000000170 .L0 
GAS LISTING /tmp/ccWUainM.s 			page 40


     /tmp/ccWUainM.s:384    .text:0000000000000174 .L0 
src/InterruptRoutine.cpp:58     .text:0000000000000174 .L0 
     /tmp/ccWUainM.s:389    .text:0000000000000178 .L0 
src/InterruptRoutine.cpp:59     .text:0000000000000178 .L0 
     /tmp/ccWUainM.s:394    .text:000000000000017c .L0 
     /tmp/ccWUainM.s:396    .text:000000000000017c .L0 
     /tmp/ccWUainM.s:399    .text:0000000000000180 .L0 
src/InterruptRoutine.cpp:62     .text:0000000000000180 .L0 
     /tmp/ccWUainM.s:413    .text:0000000000000188 .L0 
     /tmp/ccWUainM.s:414    .text:0000000000000188 .L0 
     /tmp/ccWUainM.s:417    .text:000000000000018c .L0 
src/InterruptRoutine.cpp:70     .text:000000000000018c .L0 
     /tmp/ccWUainM.s:423    .text:0000000000000190 .L0 
     /tmp/ccWUainM.s:425    .text:0000000000000190 .L0 
     /tmp/ccWUainM.s:428    .text:0000000000000194 .L0 
     /tmp/ccWUainM.s:429    .text:0000000000000194 .L0 
src/InterruptRoutine.cpp:75     .text:0000000000000194 .L0 
     /tmp/ccWUainM.s:436    .text:0000000000000198 .L0 
     /tmp/ccWUainM.s:438    .text:0000000000000198 .L0 
     /tmp/ccWUainM.s:441    .text:00000000000001a0 .L0 
     /tmp/ccWUainM.s:445    .text:00000000000001ac .L0 
src/InterruptRoutine.cpp:80     .text:00000000000001ac .L0 
     /tmp/ccWUainM.s:452    .text:00000000000001b0 .L0 
     /tmp/ccWUainM.s:453    .text:00000000000001b0 .L0 
     /tmp/ccWUainM.s:455    .text:00000000000001b0 .L0 
     /tmp/ccWUainM.s:462    .text:00000000000001bc .L0 
src/InterruptRoutine.cpp:86     .text:00000000000001bc .L0 
     /tmp/ccWUainM.s:475    .text:00000000000001c4 .L0 
     /tmp/ccWUainM.s:476    .text:00000000000001c4 .L0 
     /tmp/ccWUainM.s:477    .text:00000000000001c4 .L0 
     /tmp/ccWUainM.s:478    .text:00000000000001c4 .L0 
     /tmp/ccWUainM.s:479    .text:00000000000001c4 .L0 
     /tmp/ccWUainM.s:480    .text:00000000000001c4 .L0 
src/InterruptRoutine.cpp:101    .text:00000000000001c4 .L0 
     /tmp/ccWUainM.s:487    .text:00000000000001c8 .L0 
     /tmp/ccWUainM.s:488    .text:00000000000001c8 .L0 
     /tmp/ccWUainM.s:490    .text:00000000000001c8 .L0 
     /tmp/ccWUainM.s:497    .text:00000000000001e0 .L0 
     /tmp/ccWUainM.s:501    .text:00000000000001e4 .L0 
     /tmp/ccWUainM.s:502    .text:00000000000001e4 .L0 
     /tmp/ccWUainM.s:503    .text:00000000000001e4 .L0 
     /tmp/ccWUainM.s:509    .text:00000000000001ec .L0 
src/InterruptRoutine.cpp:116    .text:00000000000001ec .L0 
     /tmp/ccWUainM.s:514    .text:00000000000001f0 .L0 
src/InterruptRoutine.cpp:118    .text:00000000000001f0 .L0 
     /tmp/ccWUainM.s:519    .text:00000000000001f4 .L0 
     /tmp/ccWUainM.s:521    .text:00000000000001f4 .L0 
     /tmp/ccWUainM.s:524    .text:00000000000001f8 .L0 
src/InterruptRoutine.cpp:121    .text:00000000000001f8 .L0 
     /tmp/ccWUainM.s:536    .text:0000000000000200 .L0 
     /tmp/ccWUainM.s:537    .text:0000000000000200 .L0 
     /tmp/ccWUainM.s:538    .text:0000000000000200 .L0 
     /tmp/ccWUainM.s:544    .text:0000000000000208 .L0 
src/InterruptRoutine.cpp:109    .text:0000000000000208 .L0 
     /tmp/ccWUainM.s:557    .text:0000000000000210 .L0 
     /tmp/ccWUainM.s:558    .text:0000000000000210 .L0 
     /tmp/ccWUainM.s:565    .text:000000000000021c .L0 
GAS LISTING /tmp/ccWUainM.s 			page 41


     /tmp/ccWUainM.s:566    .text:000000000000021c .L0 
     /tmp/ccWUainM.s:572    .text:0000000000000224 .L0 
     /tmp/ccWUainM.s:573    .text:0000000000000224 .L0 
src/InterruptRoutine.cpp:130    .text:0000000000000224 .L0 
     /tmp/ccWUainM.s:580    .text:0000000000000228 .L0 
     /tmp/ccWUainM.s:582    .text:0000000000000228 .L0 
     /tmp/ccWUainM.s:585    .text:0000000000000230 .L0 
src/InterruptRoutine.cpp:134    .text:0000000000000230 .L0 
     /tmp/ccWUainM.s:591    .text:0000000000000234 .L0 
     /tmp/ccWUainM.s:593    .text:0000000000000234 .L0 
     /tmp/ccWUainM.s:596    .text:0000000000000238 .L0 
src/InterruptRoutine.cpp:137    .text:0000000000000238 .L0 
     /tmp/ccWUainM.s:610    .text:0000000000000240 .L0 
     /tmp/ccWUainM.s:611    .text:0000000000000240 .L0 
src/InterruptRoutine.cpp:144    .text:0000000000000240 .L0 
     /tmp/ccWUainM.s:618    .text:0000000000000244 .L0 
     /tmp/ccWUainM.s:619    .text:0000000000000244 .L0 
src/InterruptRoutine.cpp:147    .text:0000000000000244 .L0 
     /tmp/ccWUainM.s:625    .text:0000000000000248 .L0 
     /tmp/ccWUainM.s:627    .text:0000000000000248 .L0 
     /tmp/ccWUainM.s:630    .text:0000000000000250 .L0 
src/InterruptRoutine.cpp:151    .text:0000000000000250 .L0 
     /tmp/ccWUainM.s:636    .text:0000000000000254 .L0 
     /tmp/ccWUainM.s:638    .text:0000000000000254 .L0 
     /tmp/ccWUainM.s:641    .text:0000000000000258 .L0 
src/InterruptRoutine.cpp:155    .text:0000000000000258 .L0 
     /tmp/ccWUainM.s:655    .text:0000000000000260 .L0 
     /tmp/ccWUainM.s:656    .text:0000000000000260 .L0 
src/InterruptRoutine.cpp:163    .text:0000000000000260 .L0 
     /tmp/ccWUainM.s:663    .text:0000000000000264 .L0 
     /tmp/ccWUainM.s:665    .text:0000000000000264 .L0 
     /tmp/ccWUainM.s:668    .text:0000000000000268 .L0 
     /tmp/ccWUainM.s:669    .text:0000000000000268 .L0 
     /tmp/ccWUainM.s:671    .text:000000000000026c .L0 
     /tmp/ccWUainM.s:675    .text:0000000000000270 .L0 
src/InterruptRoutine.cpp:175    .text:0000000000000270 .L0 
     /tmp/ccWUainM.s:681    .text:0000000000000274 .L0 
src/InterruptRoutine.cpp:176    .text:0000000000000274 .L0 
     /tmp/ccWUainM.s:686    .text:0000000000000278 .L0 
src/InterruptRoutine.cpp:177    .text:0000000000000278 .L0 
     /tmp/ccWUainM.s:691    .text:000000000000027c .L0 
     /tmp/ccWUainM.s:693    .text:000000000000027c .L0 
     /tmp/ccWUainM.s:696    .text:0000000000000280 .L0 
src/InterruptRoutine.cpp:179    .text:0000000000000280 .L0 
     /tmp/ccWUainM.s:708    .text:0000000000000288 .L0 
     /tmp/ccWUainM.s:709    .text:0000000000000288 .L0 
     /tmp/ccWUainM.s:712    .text:0000000000000290 .L0 
     /tmp/ccWUainM.s:716    .text:000000000000029c .L0 
     /tmp/ccWUainM.s:725    .text:00000000000002a4 .L0 
     /tmp/ccWUainM.s:726    .text:00000000000002a4 .L0 
     /tmp/ccWUainM.s:727    .text:00000000000002a4 .L0 
     /tmp/ccWUainM.s:730    .text:00000000000002a8 .L0 
     /tmp/ccWUainM.s:731    .text:00000000000002a8 .L0 
src/InterruptRoutine.cpp:189    .text:00000000000002a8 .L0 
     /tmp/ccWUainM.s:738    .text:00000000000002ac .L0 
     /tmp/ccWUainM.s:740    .text:00000000000002ac .L0 
     /tmp/ccWUainM.s:744    .text:00000000000002b8 .L0 
GAS LISTING /tmp/ccWUainM.s 			page 42


src/InterruptRoutine.cpp:195    .text:00000000000002b8 .L0 
     /tmp/ccWUainM.s:750    .text:00000000000002bc .L0 
src/InterruptRoutine.cpp:198    .text:00000000000002bc .L0 
     /tmp/ccWUainM.s:755    .text:00000000000002c0 .L0 
src/InterruptRoutine.cpp:199    .text:00000000000002c0 .L0 
     /tmp/ccWUainM.s:760    .text:00000000000002c4 .L0 
     /tmp/ccWUainM.s:762    .text:00000000000002c4 .L0 
     /tmp/ccWUainM.s:765    .text:00000000000002c8 .L0 
src/InterruptRoutine.cpp:202    .text:00000000000002c8 .L0 
     /tmp/ccWUainM.s:779    .text:00000000000002d0 .L0 
     /tmp/ccWUainM.s:780    .text:00000000000002d0 .L0 
     /tmp/ccWUainM.s:781    .text:00000000000002d0 .L0 
src/InterruptRoutine.cpp:209    .text:00000000000002d0 .L0 
     /tmp/ccWUainM.s:788    .text:00000000000002d4 .L0 
     /tmp/ccWUainM.s:790    .text:00000000000002d4 .L0 
     /tmp/ccWUainM.s:794    .text:00000000000002e0 .L0 
src/InterruptRoutine.cpp:214    .text:00000000000002e0 .L0 
     /tmp/ccWUainM.s:800    .text:00000000000002e4 .L0 
src/InterruptRoutine.cpp:217    .text:00000000000002e4 .L0 
     /tmp/ccWUainM.s:805    .text:00000000000002e8 .L0 
src/InterruptRoutine.cpp:218    .text:00000000000002e8 .L0 
     /tmp/ccWUainM.s:810    .text:00000000000002ec .L0 
     /tmp/ccWUainM.s:812    .text:00000000000002ec .L0 
     /tmp/ccWUainM.s:815    .text:00000000000002f0 .L0 
src/InterruptRoutine.cpp:221    .text:00000000000002f0 .L0 
     /tmp/ccWUainM.s:829    .text:00000000000002f8 .L0 
     /tmp/ccWUainM.s:830    .text:00000000000002f8 .L0 
     /tmp/ccWUainM.s:831    .text:00000000000002f8 .L0 
src/InterruptRoutine.cpp:230    .text:00000000000002f8 .L0 
     /tmp/ccWUainM.s:838    .text:00000000000002fc .L0 
     /tmp/ccWUainM.s:840    .text:00000000000002fc .L0 
     /tmp/ccWUainM.s:844    .text:0000000000000308 .L0 
src/InterruptRoutine.cpp:236    .text:0000000000000308 .L0 
     /tmp/ccWUainM.s:850    .text:000000000000030c .L0 
src/InterruptRoutine.cpp:239    .text:000000000000030c .L0 
     /tmp/ccWUainM.s:855    .text:0000000000000310 .L0 
src/InterruptRoutine.cpp:240    .text:0000000000000310 .L0 
     /tmp/ccWUainM.s:860    .text:0000000000000314 .L0 
     /tmp/ccWUainM.s:862    .text:0000000000000314 .L0 
     /tmp/ccWUainM.s:865    .text:0000000000000318 .L0 
src/InterruptRoutine.cpp:243    .text:0000000000000318 .L0 
     /tmp/ccWUainM.s:879    .text:0000000000000320 .L0 
     /tmp/ccWUainM.s:880    .text:0000000000000320 .L0 
     /tmp/ccWUainM.s:881    .text:0000000000000320 .L0 
src/InterruptRoutine.cpp:253    .text:0000000000000320 .L0 
     /tmp/ccWUainM.s:888    .text:0000000000000324 .L0 
     /tmp/ccWUainM.s:890    .text:0000000000000324 .L0 
     /tmp/ccWUainM.s:894    .text:0000000000000330 .L0 
src/InterruptRoutine.cpp:257    .text:0000000000000330 .L0 
     /tmp/ccWUainM.s:900    .text:0000000000000334 .L0 
src/InterruptRoutine.cpp:261    .text:0000000000000334 .L0 
     /tmp/ccWUainM.s:905    .text:0000000000000338 .L0 
src/InterruptRoutine.cpp:262    .text:0000000000000338 .L0 
     /tmp/ccWUainM.s:910    .text:000000000000033c .L0 
     /tmp/ccWUainM.s:912    .text:000000000000033c .L0 
     /tmp/ccWUainM.s:915    .text:0000000000000340 .L0 
src/InterruptRoutine.cpp:265    .text:0000000000000340 .L0 
GAS LISTING /tmp/ccWUainM.s 			page 43


     /tmp/ccWUainM.s:929    .text:0000000000000348 .L0 
     /tmp/ccWUainM.s:930    .text:0000000000000348 .L0 
     /tmp/ccWUainM.s:933    .text:000000000000034c .L0 
     /tmp/ccWUainM.s:934    .text:000000000000034c .L0 
src/InterruptRoutine.cpp:274    .text:000000000000034c .L0 
     /tmp/ccWUainM.s:941    .text:0000000000000350 .L0 
     /tmp/ccWUainM.s:943    .text:0000000000000350 .L0 
     /tmp/ccWUainM.s:946    .text:0000000000000358 .L0 
     /tmp/ccWUainM.s:950    .text:0000000000000364 .L0 
src/InterruptRoutine.cpp:278    .text:0000000000000364 .L0 
     /tmp/ccWUainM.s:956    .text:0000000000000368 .L0 
     /tmp/ccWUainM.s:958    .text:0000000000000368 .L0 
     /tmp/ccWUainM.s:961    .text:000000000000036c .L0 
src/InterruptRoutine.cpp:283    .text:000000000000036c .L0 
     /tmp/ccWUainM.s:975    .text:0000000000000374 .L0 
     /tmp/ccWUainM.s:976    .text:0000000000000374 .L0 
src/InterruptRoutine.cpp:290    .text:0000000000000374 .L0 
     /tmp/ccWUainM.s:983    .text:0000000000000378 .L0 
     /tmp/ccWUainM.s:985    .text:0000000000000378 .L0 
     /tmp/ccWUainM.s:990    .text:000000000000038c .L0 
src/InterruptRoutine.cpp:292    .text:000000000000038c .L0 
     /tmp/ccWUainM.s:996    .text:0000000000000390 .L0 
src/InterruptRoutine.cpp:293    .text:0000000000000390 .L0 
     /tmp/ccWUainM.s:1001   .text:0000000000000394 .L0 
src/InterruptRoutine.cpp:294    .text:0000000000000394 .L0 
     /tmp/ccWUainM.s:1006   .text:0000000000000398 .L0 
     /tmp/ccWUainM.s:1008   .text:0000000000000398 .L0 
     /tmp/ccWUainM.s:1011   .text:000000000000039c .L0 
src/InterruptRoutine.cpp:297    .text:000000000000039c .L0 
     /tmp/ccWUainM.s:1025   .text:00000000000003a4 .L0 
     /tmp/ccWUainM.s:1026   .text:00000000000003a4 .L0 
     /tmp/ccWUainM.s:1029   .text:00000000000003a8 .L0 
     /tmp/ccWUainM.s:1030   .text:00000000000003a8 .L0 
src/InterruptRoutine.cpp:304    .text:00000000000003a8 .L0 
     /tmp/ccWUainM.s:1037   .text:00000000000003ac .L0 
     /tmp/ccWUainM.s:1039   .text:00000000000003ac .L0 
     /tmp/ccWUainM.s:1044   .text:00000000000003c0 .L0 
src/InterruptRoutine.cpp:306    .text:00000000000003c0 .L0 
     /tmp/ccWUainM.s:1050   .text:00000000000003c4 .L0 
     /tmp/ccWUainM.s:1052   .text:00000000000003c4 .L0 
     /tmp/ccWUainM.s:1055   .text:00000000000003c8 .L0 
src/InterruptRoutine.cpp:309    .text:00000000000003c8 .L0 
     /tmp/ccWUainM.s:1069   .text:00000000000003d0 .L0 
     /tmp/ccWUainM.s:1070   .text:00000000000003d0 .L0 
src/InterruptRoutine.cpp:316    .text:00000000000003d0 .L0 
     /tmp/ccWUainM.s:1077   .text:00000000000003d4 .L0 
     /tmp/ccWUainM.s:1079   .text:00000000000003d4 .L0 
     /tmp/ccWUainM.s:1082   .text:00000000000003d8 .L0 
src/InterruptRoutine.cpp:318    .text:00000000000003d8 .L0 
     /tmp/ccWUainM.s:1088   .text:00000000000003dc .L0 
     /tmp/ccWUainM.s:1090   .text:00000000000003dc .L0 
     /tmp/ccWUainM.s:1093   .text:00000000000003e0 .L0 
src/InterruptRoutine.cpp:320    .text:00000000000003e0 .L0 
     /tmp/ccWUainM.s:1109   .text:00000000000003e8 .L0 
     /tmp/ccWUainM.s:1110   .text:00000000000003e8 .L0 
     /tmp/ccWUainM.s:1113   .text:00000000000003f0 .L0 
     /tmp/ccWUainM.s:1117   .text:00000000000003f8 .L0 
GAS LISTING /tmp/ccWUainM.s 			page 44


     /tmp/ccWUainM.s:1118   .text:00000000000003f8 .L0 
     /tmp/ccWUainM.s:1122   .text:0000000000000404 .L0 
     /tmp/ccWUainM.s:1123   .text:0000000000000404 .L0 
     /tmp/ccWUainM.s:1125   .text:0000000000000408 .L0 
     /tmp/ccWUainM.s:1129   .text:0000000000000410 .L0 
     /tmp/ccWUainM.s:1130   .text:0000000000000410 .L0 
     /tmp/ccWUainM.s:1132   .text:0000000000000414 .L0 
     /tmp/ccWUainM.s:1136   .text:000000000000041c .L0 
     /tmp/ccWUainM.s:1137   .text:000000000000041c .L0 
     /tmp/ccWUainM.s:1143   .text:000000000000042c .L0 
     /tmp/ccWUainM.s:1144   .text:000000000000042c .L0 
     /tmp/ccWUainM.s:1151   .text:0000000000000444 .L0 
     /tmp/ccWUainM.s:1152   .text:0000000000000444 .L0 
     /tmp/ccWUainM.s:1164   .text:000000000000045c .L0 
src/InterruptRoutine.cpp:372    .text:000000000000045c .L0 
     /tmp/ccWUainM.s:1170   .text:0000000000000460 .L0 
     /tmp/ccWUainM.s:1171   .text:0000000000000460 .L0 
src/InterruptRoutine.cpp:375    .text:0000000000000460 .L0 
     /tmp/ccWUainM.s:1177   .text:0000000000000464 .L0 
     /tmp/ccWUainM.s:1178   .text:0000000000000464 .L0 
src/InterruptRoutine.cpp:377    .text:0000000000000464 .L0 
     /tmp/ccWUainM.s:1184   .text:0000000000000468 .L0 
     /tmp/ccWUainM.s:1186   .text:0000000000000468 .L0 
     /tmp/ccWUainM.s:1193   .text:0000000000000478 .L0 
     /tmp/ccWUainM.s:1194   .text:0000000000000478 .L0 
     /tmp/ccWUainM.s:1198   .text:0000000000000488 .L0 
     /tmp/ccWUainM.s:1200   .text:000000000000048c .L0 
     /tmp/ccWUainM.s:1201   .text:000000000000048c .L0 
     /tmp/ccWUainM.s:1204   .text:0000000000000494 .L0 
     /tmp/ccWUainM.s:1209   .text:00000000000004a0 .L0 
     /tmp/ccWUainM.s:1210   .text:00000000000004a0 .L0 
     /tmp/ccWUainM.s:1214   .text:00000000000004a4 .L0 
     /tmp/ccWUainM.s:1215   .text:00000000000004a4 .L0 
     /tmp/ccWUainM.s:1217   .text:00000000000004a8 .L0 
     /tmp/ccWUainM.s:1218   .text:00000000000004a8 .L0 
     /tmp/ccWUainM.s:1222   .text:00000000000004b4 .L0 
     /tmp/ccWUainM.s:1226   .text:00000000000004bc .L0 
     /tmp/ccWUainM.s:1227   .text:00000000000004bc .L0 
     /tmp/ccWUainM.s:1233   .text:00000000000004c8 .L0 
     /tmp/ccWUainM.s:1234   .text:00000000000004c8 .L0 
     /tmp/ccWUainM.s:1236   .text:00000000000004cc .L0 
     /tmp/ccWUainM.s:1238   .text:00000000000004d0 .L0 
     /tmp/ccWUainM.s:1244   .text:00000000000004d8 .L0 
     /tmp/ccWUainM.s:1247   .text:00000000000004dc .L0 
src/InterruptRoutine.cpp:395    .text:00000000000004dc .L0 
     /tmp/ccWUainM.s:1253   .text:00000000000004e0 .L0 
src/InterruptRoutine.cpp:398    .text:00000000000004e0 .L0 
     /tmp/ccWUainM.s:1263   .text:00000000000004e4 .L0 
     /tmp/ccWUainM.s:1273   .text:00000000000004e8 .L0 
     /tmp/ccWUainM.s:1274   .text:00000000000004e8 .L0 
     /tmp/ccWUainM.s:1275   .text:00000000000004e8 .L0 
     /tmp/ccWUainM.s:1281   .text:00000000000004f0 .L0 
     /tmp/ccWUainM.s:1282   .text:00000000000004f0 .L0 
     /tmp/ccWUainM.s:1289   .text:00000000000004fc .L0 
     /tmp/ccWUainM.s:1299   .text:00000000000004fc .L0 
     /tmp/ccWUainM.s:558    .text:0000000000000210 .L0 
     /tmp/ccWUainM.s:985    .text:0000000000000378 .L0 
GAS LISTING /tmp/ccWUainM.s 			page 45


     /tmp/ccWUainM.s:1039   .text:00000000000003ac .L0 
     /tmp/ccWUainM.s:1118   .text:00000000000003f8 .L0 
     /tmp/ccWUainM.s:1144   .text:000000000000042c .L0 
     /tmp/ccWUainM.s:1152   .text:0000000000000444 .L0 
     /tmp/ccWUainM.s:1186   .text:0000000000000468 .L0 
     /tmp/ccWUainM.s:1194   .text:0000000000000478 .L0 
     /tmp/ccWUainM.s:1227   .text:00000000000004bc .L0 
     /tmp/ccWUainM.s:197    .text:00000000000000c8 .L31
     /tmp/ccWUainM.s:1102   .text:00000000000003e8 .L32
     /tmp/ccWUainM.s:1158   .text:000000000000045c .L33
     /tmp/ccWUainM.s:352    .text:0000000000000154 .L34
     /tmp/ccWUainM.s:408    .text:0000000000000188 .L35
     /tmp/ccWUainM.s:470    .text:00000000000001c4 .L36
     /tmp/ccWUainM.s:551    .text:0000000000000210 .L37
     /tmp/ccWUainM.s:605    .text:0000000000000240 .L38
     /tmp/ccWUainM.s:650    .text:0000000000000260 .L39
     /tmp/ccWUainM.s:719    .text:00000000000002a4 .L40
     /tmp/ccWUainM.s:774    .text:00000000000002d0 .L41
     /tmp/ccWUainM.s:824    .text:00000000000002f8 .L42
     /tmp/ccWUainM.s:874    .text:0000000000000320 .L43
     /tmp/ccWUainM.s:924    .text:0000000000000348 .L44
     /tmp/ccWUainM.s:970    .text:0000000000000374 .L45
     /tmp/ccWUainM.s:1020   .text:00000000000003a4 .L46
     /tmp/ccWUainM.s:1064   .text:00000000000003d0 .L47
     /tmp/ccWUainM.s:171    .text:00000000000000a4 .L3
     /tmp/ccWUainM.s:204    .text:00000000000000cc .L5
     /tmp/ccWUainM.s:212    .text:00000000000000d4 .L6
     /tmp/ccWUainM.s:533    .text:0000000000000200 .L48
     /tmp/ccWUainM.s:220    .text:00000000000000dc .L7
     /tmp/ccWUainM.s:498    .text:00000000000001e4 .L8
     /tmp/ccWUainM.s:228    .text:00000000000000e4 .L9
     /tmp/ccWUainM.s:236    .text:00000000000000ec .L10
     /tmp/ccWUainM.s:705    .text:0000000000000288 .L49
     /tmp/ccWUainM.s:244    .text:00000000000000f4 .L11
     /tmp/ccWUainM.s:672    .text:0000000000000270 .L12
     /tmp/ccWUainM.s:252    .text:00000000000000fc .L13
     /tmp/ccWUainM.s:260    .text:0000000000000104 .L14
     /tmp/ccWUainM.s:268    .text:000000000000010c .L15
     /tmp/ccWUainM.s:276    .text:0000000000000114 .L16
     /tmp/ccWUainM.s:284    .text:000000000000011c .L17
     /tmp/ccWUainM.s:292    .text:0000000000000124 .L18
     /tmp/ccWUainM.s:301    .text:000000000000012c .L19
     /tmp/ccWUainM.s:309    .text:0000000000000134 .L20
     /tmp/ccWUainM.s:1141   .text:000000000000042c .L50
     /tmp/ccWUainM.s:1149   .text:0000000000000444 .L51
     /tmp/ccWUainM.s:1127   .text:0000000000000410 .L23
     /tmp/ccWUainM.s:1134   .text:000000000000041c .L24
     /tmp/ccWUainM.s:1212   .text:00000000000004a4 .L27
     /tmp/ccWUainM.s:1224   .text:00000000000004bc .L25
     /tmp/ccWUainM.s:1207   .text:00000000000004a0 .L26
     /tmp/ccWUainM.s:1191   .text:0000000000000478 .L52
     /tmp/ccWUainM.s:1264   .text:00000000000004e8 .L53
     /tmp/ccWUainM.s:1245   .text:00000000000004dc .L28
     /tmp/ccWUainM.s:3339   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccWUainM.s:5299   .debug_str:00000000000009e3 .LASF178
     /tmp/ccWUainM.s:5185   .debug_str:00000000000005f2 .LASF179
     /tmp/ccWUainM.s:5319   .debug_str:0000000000000b32 .LASF180
GAS LISTING /tmp/ccWUainM.s 			page 46


     /tmp/ccWUainM.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccWUainM.s:1292   .text:00000000000004fc .Letext0
     /tmp/ccWUainM.s:4999   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccWUainM.s:5117   .debug_str:0000000000000397 .LASF0
     /tmp/ccWUainM.s:5137   .debug_str:000000000000044a .LASF1
     /tmp/ccWUainM.s:5231   .debug_str:00000000000007c1 .LASF2
     /tmp/ccWUainM.s:5077   .debug_str:0000000000000254 .LASF3
     /tmp/ccWUainM.s:5237   .debug_str:00000000000007e2 .LASF4
     /tmp/ccWUainM.s:5127   .debug_str:00000000000003f9 .LASF5
     /tmp/ccWUainM.s:5013   .debug_str:0000000000000065 .LASF6
     /tmp/ccWUainM.s:5211   .debug_str:000000000000072e .LASF7
     /tmp/ccWUainM.s:5199   .debug_str:00000000000006bd .LASF8
     /tmp/ccWUainM.s:5135   .debug_str:0000000000000437 .LASF9
     /tmp/ccWUainM.s:5091   .debug_str:00000000000002aa .LASF10
     /tmp/ccWUainM.s:5097   .debug_str:00000000000002d9 .LASF11
     /tmp/ccWUainM.s:5045   .debug_str:0000000000000155 .LASF12
     /tmp/ccWUainM.s:5081   .debug_str:0000000000000272 .LASF13
     /tmp/ccWUainM.s:5055   .debug_str:0000000000000192 .LASF14
     /tmp/ccWUainM.s:5043   .debug_str:0000000000000145 .LASF15
     /tmp/ccWUainM.s:5277   .debug_str:000000000000092d .LASF16
     /tmp/ccWUainM.s:5073   .debug_str:000000000000022b .LASF17
     /tmp/ccWUainM.s:5261   .debug_str:000000000000088b .LASF18
     /tmp/ccWUainM.s:5195   .debug_str:000000000000067f .LASF24
     /tmp/ccWUainM.s:5295   .debug_str:00000000000009d3 .LASF47
     /tmp/ccWUainM.s:5047   .debug_str:0000000000000164 .LASF19
     /tmp/ccWUainM.s:5017   .debug_str:0000000000000085 .LASF20
     /tmp/ccWUainM.s:5331   .debug_str:0000000000000baf .LASF21
     /tmp/ccWUainM.s:5271   .debug_str:000000000000090e .LASF22
     /tmp/ccWUainM.s:5123   .debug_str:00000000000003e6 .LASF23
     /tmp/ccWUainM.s:5189   .debug_str:0000000000000627 .LASF25
     /tmp/ccWUainM.s:5015   .debug_str:000000000000006c .LASF26
     /tmp/ccWUainM.s:5347   .debug_str:0000000000000c42 .LASF33
     /tmp/ccWUainM.s:5169   .debug_str:000000000000054b .LASF35
     /tmp/ccWUainM.s:5213   .debug_str:0000000000000735 .LASF37
     /tmp/ccWUainM.s:5283   .debug_str:0000000000000962 .LASF59
     /tmp/ccWUainM.s:5353   .debug_str:0000000000000c61 .LASF27
     /tmp/ccWUainM.s:5145   .debug_str:000000000000049c .LASF28
     /tmp/ccWUainM.s:5243   .debug_str:0000000000000811 .LASF29
     /tmp/ccWUainM.s:5281   .debug_str:0000000000000958 .LASF30
     /tmp/ccWUainM.s:5175   .debug_str:0000000000000594 .LASF31
     /tmp/ccWUainM.s:5177   .debug_str:000000000000059e .LASF32
     /tmp/ccWUainM.s:5257   .debug_str:0000000000000863 .LASF34
     /tmp/ccWUainM.s:5099   .debug_str:00000000000002e7 .LASF36
     /tmp/ccWUainM.s:5079   .debug_str:000000000000025a .LASF149
     /tmp/ccWUainM.s:5241   .debug_str:00000000000007ef .LASF151
     /tmp/ccWUainM.s:5143   .debug_str:0000000000000496 .LASF38
     /tmp/ccWUainM.s:5327   .debug_str:0000000000000b85 .LASF39
     /tmp/ccWUainM.s:5071   .debug_str:0000000000000215 .LASF40
     /tmp/ccWUainM.s:5263   .debug_str:00000000000008a1 .LASF41
     /tmp/ccWUainM.s:5293   .debug_str:00000000000009cd .LASF181
     /tmp/ccWUainM.s:5215   .debug_str:0000000000000741 .LASF42
     /tmp/ccWUainM.s:5287   .debug_str:00000000000009aa .LASF43
     /tmp/ccWUainM.s:5003   .debug_str:0000000000000016 .LASF44
     /tmp/ccWUainM.s:5159   .debug_str:000000000000051b .LASF45
     /tmp/ccWUainM.s:5031   .debug_str:00000000000000e4 .LASF46
     /tmp/ccWUainM.s:5049   .debug_str:0000000000000169 .LASF48
     /tmp/ccWUainM.s:5365   .debug_str:0000000000000ca8 .LASF49
GAS LISTING /tmp/ccWUainM.s 			page 47


     /tmp/ccWUainM.s:5269   .debug_str:00000000000008fc .LASF51
     /tmp/ccWUainM.s:5035   .debug_str:00000000000000fb .LASF50
     /tmp/ccWUainM.s:5341   .debug_str:0000000000000bf8 .LASF52
     /tmp/ccWUainM.s:5009   .debug_str:0000000000000040 .LASF53
     /tmp/ccWUainM.s:5247   .debug_str:0000000000000825 .LASF54
     /tmp/ccWUainM.s:5259   .debug_str:0000000000000878 .LASF55
     /tmp/ccWUainM.s:5075   .debug_str:0000000000000241 .LASF56
     /tmp/ccWUainM.s:5085   .debug_str:0000000000000286 .LASF57
     /tmp/ccWUainM.s:5363   .debug_str:0000000000000ca3 .LASF58
     /tmp/ccWUainM.s:5301   .debug_str:0000000000000aa7 .LASF60
     /tmp/ccWUainM.s:5255   .debug_str:000000000000085a .LASF61
     /tmp/ccWUainM.s:5103   .debug_str:000000000000031b .LASF63
     /tmp/ccWUainM.s:5157   .debug_str:0000000000000513 .LASF62
     /tmp/ccWUainM.s:5291   .debug_str:00000000000009b5 .LASF64
     /tmp/ccWUainM.s:5275   .debug_str:000000000000091f .LASF65
     /tmp/ccWUainM.s:5265   .debug_str:00000000000008ab .LASF66
     /tmp/ccWUainM.s:5165   .debug_str:0000000000000539 .LASF67
     /tmp/ccWUainM.s:5371   .debug_str:0000000000000ce2 .LASF68
     /tmp/ccWUainM.s:5011   .debug_str:0000000000000050 .LASF69
     /tmp/ccWUainM.s:5111   .debug_str:0000000000000350 .LASF70
     /tmp/ccWUainM.s:5233   .debug_str:00000000000007cf .LASF71
     /tmp/ccWUainM.s:5155   .debug_str:00000000000004fe .LASF72
     /tmp/ccWUainM.s:5063   .debug_str:00000000000001dd .LASF73
     /tmp/ccWUainM.s:5039   .debug_str:0000000000000111 .LASF74
     /tmp/ccWUainM.s:5181   .debug_str:00000000000005ad .LASF75
     /tmp/ccWUainM.s:5339   .debug_str:0000000000000be4 .LASF76
     /tmp/ccWUainM.s:5115   .debug_str:0000000000000372 .LASF77
     /tmp/ccWUainM.s:5351   .debug_str:0000000000000c54 .LASF78
     /tmp/ccWUainM.s:5121   .debug_str:00000000000003c8 .LASF79
     /tmp/ccWUainM.s:5235   .debug_str:00000000000007d9 .LASF80
     /tmp/ccWUainM.s:5191   .debug_str:0000000000000654 .LASF81
     /tmp/ccWUainM.s:5251   .debug_str:0000000000000849 .LASF82
     /tmp/ccWUainM.s:5023   .debug_str:00000000000000a1 .LASF83
     /tmp/ccWUainM.s:5147   .debug_str:00000000000004c0 .LASF84
     /tmp/ccWUainM.s:5005   .debug_str:000000000000001c .LASF85
     /tmp/ccWUainM.s:5051   .debug_str:0000000000000171 .LASF86
     /tmp/ccWUainM.s:5057   .debug_str:00000000000001a2 .LASF87
     /tmp/ccWUainM.s:5297   .debug_str:00000000000009db .LASF88
     /tmp/ccWUainM.s:5033   .debug_str:00000000000000ed .LASF89
     /tmp/ccWUainM.s:5279   .debug_str:0000000000000939 .LASF90
     /tmp/ccWUainM.s:5037   .debug_str:000000000000010b .LASF91
     /tmp/ccWUainM.s:5359   .debug_str:0000000000000c77 .LASF92
     /tmp/ccWUainM.s:5125   .debug_str:00000000000003f0 .LASF93
     /tmp/ccWUainM.s:5105   .debug_str:0000000000000334 .LASF182
     /tmp/ccWUainM.s:5187   .debug_str:000000000000060b .LASF183
     /tmp/ccWUainM.s:5089   .debug_str:0000000000000290 .LASF94
     /tmp/ccWUainM.s:5065   .debug_str:00000000000001f1 .LASF95
     /tmp/ccWUainM.s:5227   .debug_str:000000000000079f .LASF184
     /tmp/ccWUainM.s:5007   .debug_str:000000000000003b .LASF96
     /tmp/ccWUainM.s:5357   .debug_str:0000000000000c71 .LASF97
     /tmp/ccWUainM.s:5311   .debug_str:0000000000000af9 .LASF98
     /tmp/ccWUainM.s:5029   .debug_str:00000000000000d6 .LASF185
     /tmp/ccWUainM.s:5197   .debug_str:000000000000068f .LASF186
     /tmp/ccWUainM.s:5101   .debug_str:0000000000000311 .LASF99
     /tmp/ccWUainM.s:5335   .debug_str:0000000000000bc8 .LASF100
     /tmp/ccWUainM.s:5141   .debug_str:0000000000000477 .LASF101
     /tmp/ccWUainM.s:5321   .debug_str:0000000000000b51 .LASF102
GAS LISTING /tmp/ccWUainM.s 			page 48


     /tmp/ccWUainM.s:5343   .debug_str:0000000000000c0a .LASF103
     /tmp/ccWUainM.s:5249   .debug_str:0000000000000838 .LASF104
     /tmp/ccWUainM.s:5109   .debug_str:0000000000000345 .LASF105
     /tmp/ccWUainM.s:5229   .debug_str:00000000000007a4 .LASF106
     /tmp/ccWUainM.s:5163   .debug_str:0000000000000530 .LASF107
     /tmp/ccWUainM.s:5323   .debug_str:0000000000000b60 .LASF108
     /tmp/ccWUainM.s:5153   .debug_str:00000000000004f5 .LASF109
     /tmp/ccWUainM.s:5139   .debug_str:000000000000045d .LASF110
     /tmp/ccWUainM.s:5223   .debug_str:000000000000077c .LASF111
     /tmp/ccWUainM.s:5027   .debug_str:00000000000000c9 .LASF112
     /tmp/ccWUainM.s:5107   .debug_str:000000000000033f .LASF113
     /tmp/ccWUainM.s:5307   .debug_str:0000000000000ace .LASF114
     /tmp/ccWUainM.s:5225   .debug_str:0000000000000781 .LASF115
     /tmp/ccWUainM.s:5025   .debug_str:00000000000000bb .LASF116
     /tmp/ccWUainM.s:5361   .debug_str:0000000000000c8d .LASF117
     /tmp/ccWUainM.s:5193   .debug_str:0000000000000676 .LASF118
     /tmp/ccWUainM.s:5151   .debug_str:00000000000004d8 .LASF119
     /tmp/ccWUainM.s:5315   .debug_str:0000000000000b10 .LASF120
     /tmp/ccWUainM.s:5317   .debug_str:0000000000000b26 .LASF121
     /tmp/ccWUainM.s:5273   .debug_str:0000000000000913 .LASF122
     /tmp/ccWUainM.s:5001   .debug_str:0000000000000000 .LASF123
     /tmp/ccWUainM.s:5367   .debug_str:0000000000000cb5 .LASF124
     /tmp/ccWUainM.s:5369   .debug_str:0000000000000ccb .LASF125
     /tmp/ccWUainM.s:5067   .debug_str:00000000000001f7 .LASF126
     /tmp/ccWUainM.s:5325   .debug_str:0000000000000b7a .LASF127
     /tmp/ccWUainM.s:5119   .debug_str:00000000000003a4 .LASF128
     /tmp/ccWUainM.s:5129   .debug_str:000000000000040b .LASF129
     /tmp/ccWUainM.s:5267   .debug_str:00000000000008d9 .LASF130
     /tmp/ccWUainM.s:5021   .debug_str:0000000000000096 .LASF131
     /tmp/ccWUainM.s:5309   .debug_str:0000000000000ad7 .LASF132
     /tmp/ccWUainM.s:5333   .debug_str:0000000000000bbb .LASF133
     /tmp/ccWUainM.s:5285   .debug_str:0000000000000986 .LASF134
     /tmp/ccWUainM.s:5349   .debug_str:0000000000000c4e .LASF135
     /tmp/ccWUainM.s:5337   .debug_str:0000000000000bd5 .LASF136
     /tmp/ccWUainM.s:5217   .debug_str:0000000000000749 .LASF137
     /tmp/ccWUainM.s:5313   .debug_str:0000000000000b01 .LASF138
     /tmp/ccWUainM.s:5305   .debug_str:0000000000000ac7 .LASF139
     /tmp/ccWUainM.s:5179   .debug_str:00000000000005a8 .LASF140
     /tmp/ccWUainM.s:5245   .debug_str:000000000000081e .LASF141
     /tmp/ccWUainM.s:5069   .debug_str:000000000000020e .LASF142
     /tmp/ccWUainM.s:5059   .debug_str:00000000000001bb .LASF143
     /tmp/ccWUainM.s:5053   .debug_str:000000000000017a .LASF144
     /tmp/ccWUainM.s:5093   .debug_str:00000000000002ba .LASF145
     /tmp/ccWUainM.s:5171   .debug_str:000000000000056f .LASF146
     /tmp/ccWUainM.s:5083   .debug_str:0000000000000281 .LASF147
     /tmp/ccWUainM.s:5373   .debug_str:0000000000000cf4 .LASF148
     /tmp/ccWUainM.s:5183   .debug_str:00000000000005d8 .LASF150
     /tmp/ccWUainM.s:5133   .debug_str:000000000000041d .LASF152
     /tmp/ccWUainM.s:5329   .debug_str:0000000000000b9f .LASF153
     /tmp/ccWUainM.s:5345   .debug_str:0000000000000c2a .LASF154
     /tmp/ccWUainM.s:5209   .debug_str:0000000000000713 .LASF155
     /tmp/ccWUainM.s:5219   .debug_str:0000000000000757 .LASF156
     /tmp/ccWUainM.s:5207   .debug_str:00000000000006f8 .LASF157
     /tmp/ccWUainM.s:5041   .debug_str:000000000000012b .LASF158
     /tmp/ccWUainM.s:5289   .debug_str:00000000000009b0 .LASF159
     /tmp/ccWUainM.s:5203   .debug_str:00000000000006d5 .LASF160
     /tmp/ccWUainM.s:51     .text:0000000000000024 .LFB42
GAS LISTING /tmp/ccWUainM.s 			page 49


     /tmp/ccWUainM.s:1290   .text:00000000000004fc .LFE42
     /tmp/ccWUainM.s:4550   .debug_loc:0000000000000000 .LLST0
     /tmp/ccWUainM.s:5239   .debug_str:00000000000007e9 .LASF161
     /tmp/ccWUainM.s:4567   .debug_loc:000000000000004c .LLST1
     /tmp/ccWUainM.s:5303   .debug_str:0000000000000ab9 .LASF162
     /tmp/ccWUainM.s:4586   .debug_loc:00000000000000a8 .LLST2
     /tmp/ccWUainM.s:5221   .debug_str:0000000000000771 .LASF163
     /tmp/ccWUainM.s:4597   .debug_loc:00000000000000de .LLST3
     /tmp/ccWUainM.s:5131   .debug_str:0000000000000417 .LASF164
     /tmp/ccWUainM.s:4620   .debug_loc:000000000000014d .LLST4
     /tmp/ccWUainM.s:355    .text:0000000000000154 .LBB59
     /tmp/ccWUainM.s:405    .text:0000000000000184 .LBE59
     /tmp/ccWUainM.s:5095   .debug_str:00000000000002d3 .LASF165
     /tmp/ccWUainM.s:4640   .debug_loc:00000000000001aa .LLST8
     /tmp/ccWUainM.s:5019   .debug_str:000000000000008a .LASF166
     /tmp/ccWUainM.s:4647   .debug_loc:00000000000001cd .LLST9
     /tmp/ccWUainM.s:5161   .debug_str:0000000000000523 .LASF167
     /tmp/ccWUainM.s:4654   .debug_loc:00000000000001f0 .LLST10
     /tmp/ccWUainM.s:372    .text:0000000000000164 .LVL16
     /tmp/ccWUainM.s:376    .text:0000000000000170 .LVL17
     /tmp/ccWUainM.s:411    .text:0000000000000188 .LBB61
     /tmp/ccWUainM.s:467    .text:00000000000001c0 .LBE61
     /tmp/ccWUainM.s:5253   .debug_str:0000000000000852 .LASF168
     /tmp/ccWUainM.s:4661   .debug_loc:0000000000000213 .LLST11
     /tmp/ccWUainM.s:4668   .debug_loc:0000000000000236 .LLST12
     /tmp/ccWUainM.s:5173   .debug_str:0000000000000588 .LASF169
     /tmp/ccWUainM.s:4675   .debug_loc:0000000000000259 .LLST13
     /tmp/ccWUainM.s:439    .text:00000000000001a0 .LVL23
     /tmp/ccWUainM.s:443    .text:00000000000001ac .LVL24
     /tmp/ccWUainM.s:4979   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccWUainM.s:4684   .debug_loc:0000000000000281 .LLST14
     /tmp/ccWUainM.s:4692   .debug_loc:00000000000002a6 .LLST15
     /tmp/ccWUainM.s:4700   .debug_loc:00000000000002cb .LLST16
     /tmp/ccWUainM.s:5167   .debug_str:0000000000000544 .LASF170
     /tmp/ccWUainM.s:4708   .debug_loc:00000000000002f0 .LLST17
     /tmp/ccWUainM.s:4716   .debug_loc:0000000000000315 .LLST18
     /tmp/ccWUainM.s:4723   .debug_loc:0000000000000338 .LLST19
     /tmp/ccWUainM.s:495    .text:00000000000001e0 .LVL28
     /tmp/ccWUainM.s:555    .text:0000000000000210 .LBB66
     /tmp/ccWUainM.s:602    .text:000000000000023c .LBE66
     /tmp/ccWUainM.s:4737   .debug_loc:0000000000000371 .LLST20
     /tmp/ccWUainM.s:561    .text:000000000000021c .LBB67
     /tmp/ccWUainM.s:570    .text:0000000000000224 .LBE67
     /tmp/ccWUainM.s:4744   .debug_loc:0000000000000394 .LLST21
     /tmp/ccWUainM.s:4752   .debug_loc:00000000000003b8 .LLST22
     /tmp/ccWUainM.s:583    .text:0000000000000230 .LVL36
     /tmp/ccWUainM.s:608    .text:0000000000000240 .LBB70
     /tmp/ccWUainM.s:647    .text:000000000000025c .LBE70
     /tmp/ccWUainM.s:5061   .debug_str:00000000000001d3 .LASF171
     /tmp/ccWUainM.s:4759   .debug_loc:00000000000003db .LLST23
     /tmp/ccWUainM.s:4766   .debug_loc:00000000000003fe .LLST24
     /tmp/ccWUainM.s:628    .text:0000000000000250 .LVL41
     /tmp/ccWUainM.s:4773   .debug_loc:0000000000000421 .LLST25
     /tmp/ccWUainM.s:4780   .debug_loc:0000000000000444 .LLST26
     /tmp/ccWUainM.s:4787   .debug_loc:0000000000000467 .LLST27
     /tmp/ccWUainM.s:710    .text:0000000000000290 .LVL49
     /tmp/ccWUainM.s:714    .text:000000000000029c .LVL50
GAS LISTING /tmp/ccWUainM.s 			page 50


     /tmp/ccWUainM.s:723    .text:00000000000002a4 .LBB75
     /tmp/ccWUainM.s:771    .text:00000000000002cc .LBE75
     /tmp/ccWUainM.s:4794   .debug_loc:000000000000048a .LLST28
     /tmp/ccWUainM.s:4802   .debug_loc:00000000000004af .LLST29
     /tmp/ccWUainM.s:4809   .debug_loc:00000000000004d2 .LLST30
     /tmp/ccWUainM.s:5113   .debug_str:0000000000000364 .LASF172
     /tmp/ccWUainM.s:4816   .debug_loc:00000000000004f5 .LLST31
     /tmp/ccWUainM.s:742    .text:00000000000002b8 .LVL54
     /tmp/ccWUainM.s:777    .text:00000000000002d0 .LBB77
     /tmp/ccWUainM.s:821    .text:00000000000002f4 .LBE77
     /tmp/ccWUainM.s:4823   .debug_loc:0000000000000518 .LLST32
     /tmp/ccWUainM.s:4831   .debug_loc:000000000000053d .LLST33
     /tmp/ccWUainM.s:4838   .debug_loc:0000000000000560 .LLST34
     /tmp/ccWUainM.s:792    .text:00000000000002e0 .LVL58
     /tmp/ccWUainM.s:827    .text:00000000000002f8 .LBB79
     /tmp/ccWUainM.s:871    .text:000000000000031c .LBE79
     /tmp/ccWUainM.s:4845   .debug_loc:0000000000000583 .LLST35
     /tmp/ccWUainM.s:4853   .debug_loc:00000000000005a8 .LLST36
     /tmp/ccWUainM.s:4860   .debug_loc:00000000000005cb .LLST37
     /tmp/ccWUainM.s:842    .text:0000000000000308 .LVL62
     /tmp/ccWUainM.s:877    .text:0000000000000320 .LBB81
     /tmp/ccWUainM.s:921    .text:0000000000000344 .LBE81
     /tmp/ccWUainM.s:4867   .debug_loc:00000000000005ee .LLST38
     /tmp/ccWUainM.s:4875   .debug_loc:0000000000000613 .LLST39
     /tmp/ccWUainM.s:4882   .debug_loc:0000000000000636 .LLST40
     /tmp/ccWUainM.s:892    .text:0000000000000330 .LVL66
     /tmp/ccWUainM.s:927    .text:0000000000000348 .LBB83
     /tmp/ccWUainM.s:967    .text:0000000000000370 .LBE83
     /tmp/ccWUainM.s:5201   .debug_str:00000000000006d0 .LASF173
     /tmp/ccWUainM.s:4889   .debug_loc:0000000000000659 .LLST41
     /tmp/ccWUainM.s:4896   .debug_loc:000000000000067c .LLST42
     /tmp/ccWUainM.s:944    .text:0000000000000358 .LVL71
     /tmp/ccWUainM.s:948    .text:0000000000000364 .LVL72
     /tmp/ccWUainM.s:973    .text:0000000000000374 .LBB85
     /tmp/ccWUainM.s:1017   .text:00000000000003a0 .LBE85
     /tmp/ccWUainM.s:4903   .debug_loc:000000000000069f .LLST43
     /tmp/ccWUainM.s:4910   .debug_loc:00000000000006c2 .LLST44
     /tmp/ccWUainM.s:988    .text:000000000000038c .LVL76
     /tmp/ccWUainM.s:1023   .text:00000000000003a4 .LBB87
     /tmp/ccWUainM.s:1061   .text:00000000000003cc .LBE87
     /tmp/ccWUainM.s:4917   .debug_loc:00000000000006e5 .LLST45
     /tmp/ccWUainM.s:4924   .debug_loc:0000000000000708 .LLST46
     /tmp/ccWUainM.s:1042   .text:00000000000003c0 .LVL81
     /tmp/ccWUainM.s:1067   .text:00000000000003d0 .LBB89
     /tmp/ccWUainM.s:1099   .text:00000000000003e4 .LBE89
     /tmp/ccWUainM.s:5355   .debug_str:0000000000000c6c .LASF174
     /tmp/ccWUainM.s:4931   .debug_loc:000000000000072b .LLST47
     /tmp/ccWUainM.s:317    .text:000000000000013c .LBB91
     /tmp/ccWUainM.s:349    .text:0000000000000150 .LBE91
     /tmp/ccWUainM.s:4938   .debug_loc:000000000000074e .LLST48
     /tmp/ccWUainM.s:1115   .text:00000000000003f8 .LBB54
     /tmp/ccWUainM.s:1159   .text:000000000000045c .LBE54
     /tmp/ccWUainM.s:4945   .debug_loc:0000000000000771 .LLST7
     /tmp/ccWUainM.s:1139   .text:0000000000000428 .LVL90
     /tmp/ccWUainM.s:1147   .text:0000000000000440 .LVL91
     /tmp/ccWUainM.s:1155   .text:0000000000000458 .LVL92
     /tmp/ccWUainM.s:1230   .text:00000000000004c8 .LBB48
GAS LISTING /tmp/ccWUainM.s 			page 51


     /tmp/ccWUainM.s:1242   .text:00000000000004d8 .LBE48
     /tmp/ccWUainM.s:4952   .debug_loc:0000000000000794 .LLST5
     /tmp/ccWUainM.s:1271   .text:00000000000004e8 .LBB50
     /tmp/ccWUainM.s:1279   .text:00000000000004f0 .LBE50
     /tmp/ccWUainM.s:4959   .debug_loc:00000000000007b7 .LLST6
     /tmp/ccWUainM.s:1202   .text:0000000000000494 .LVL98
     /tmp/ccWUainM.s:1206   .text:00000000000004a0 .LVL99
     /tmp/ccWUainM.s:1220   .text:00000000000004b4 .LVL101
     /tmp/ccWUainM.s:1283   .text:00000000000004f8 .LVL106
     /tmp/ccWUainM.s:1111   .text:00000000000003f0 .LVL88
     /tmp/ccWUainM.s:10     .text:0000000000000000 .LFB41
     /tmp/ccWUainM.s:45     .text:0000000000000024 .LFE41
     /tmp/ccWUainM.s:5087   .debug_str:000000000000028b .LASF175
     /tmp/ccWUainM.s:5205   .debug_str:00000000000006ea .LASF176
     /tmp/ccWUainM.s:5149   .debug_str:00000000000004cd .LASF177
     /tmp/ccWUainM.s:116    .text:0000000000000068 .LVL0
     /tmp/ccWUainM.s:194    .text:00000000000000c4 .LVL6
     /tmp/ccWUainM.s:196    .text:00000000000000c8 .LVL7
     /tmp/ccWUainM.s:123    .text:000000000000006c .LVL1
     /tmp/ccWUainM.s:170    .text:00000000000000a4 .LVL5
     /tmp/ccWUainM.s:300    .text:000000000000012c .LVL9
     /tmp/ccWUainM.s:351    .text:0000000000000154 .LVL13
     /tmp/ccWUainM.s:1035   .text:00000000000003ac .LVL80
     /tmp/ccWUainM.s:1101   .text:00000000000003e8 .LVL87
     /tmp/ccWUainM.s:1182   .text:0000000000000468 .LVL95
     /tmp/ccWUainM.s:130    .text:0000000000000070 .LVL2
     /tmp/ccWUainM.s:1175   .text:0000000000000464 .LVL94
     /tmp/ccWUainM.s:143    .text:0000000000000078 .LVL4
     /tmp/ccWUainM.s:203    .text:00000000000000cc .LVL8
     /tmp/ccWUainM.s:1157   .text:000000000000045c .LVL93
     /tmp/ccWUainM.s:1190   .text:0000000000000478 .LVL97
     /tmp/ccWUainM.s:136    .text:0000000000000074 .LVL3
     /tmp/ccWUainM.s:1120   .text:0000000000000404 .LVL89
     /tmp/ccWUainM.s:1188   .text:0000000000000474 .LVL96
     /tmp/ccWUainM.s:359    .text:0000000000000158 .LVL14
     /tmp/ccWUainM.s:407    .text:0000000000000188 .LVL19
     /tmp/ccWUainM.s:367    .text:000000000000015c .LVL15
     /tmp/ccWUainM.s:426    .text:0000000000000194 .LVL21
     /tmp/ccWUainM.s:469    .text:00000000000001c4 .LVL26
     /tmp/ccWUainM.s:434    .text:0000000000000198 .LVL22
     /tmp/ccWUainM.s:451    .text:00000000000001b0 .LVL25
     /tmp/ccWUainM.s:485    .text:00000000000001c8 .LVL27
     /tmp/ccWUainM.s:550    .text:0000000000000210 .LVL32
     /tmp/ccWUainM.s:500    .text:00000000000001e4 .LVL29
     /tmp/ccWUainM.s:532    .text:0000000000000200 .LVL31
     /tmp/ccWUainM.s:578    .text:0000000000000228 .LVL35
     /tmp/ccWUainM.s:604    .text:0000000000000240 .LVL38
     /tmp/ccWUainM.s:560    .text:000000000000021c .LVL33
     /tmp/ccWUainM.s:568    .text:0000000000000224 .LVL34
     /tmp/ccWUainM.s:616    .text:0000000000000244 .LVL39
     /tmp/ccWUainM.s:649    .text:0000000000000260 .LVL43
     /tmp/ccWUainM.s:623    .text:0000000000000248 .LVL40
     /tmp/ccWUainM.s:661    .text:0000000000000264 .LVL44
     /tmp/ccWUainM.s:718    .text:00000000000002a4 .LVL51
     /tmp/ccWUainM.s:666    .text:0000000000000268 .LVL45
     /tmp/ccWUainM.s:673    .text:0000000000000270 .LVL46
     /tmp/ccWUainM.s:704    .text:0000000000000288 .LVL48
GAS LISTING /tmp/ccWUainM.s 			page 52


     /tmp/ccWUainM.s:728    .text:00000000000002a8 .LVL52
     /tmp/ccWUainM.s:736    .text:00000000000002ac .LVL53
     /tmp/ccWUainM.s:773    .text:00000000000002d0 .LVL56
     /tmp/ccWUainM.s:786    .text:00000000000002d4 .LVL57
     /tmp/ccWUainM.s:823    .text:00000000000002f8 .LVL60
     /tmp/ccWUainM.s:836    .text:00000000000002fc .LVL61
     /tmp/ccWUainM.s:873    .text:0000000000000320 .LVL64
     /tmp/ccWUainM.s:886    .text:0000000000000324 .LVL65
     /tmp/ccWUainM.s:923    .text:0000000000000348 .LVL68
     /tmp/ccWUainM.s:931    .text:000000000000034c .LVL69
     /tmp/ccWUainM.s:969    .text:0000000000000374 .LVL74
     /tmp/ccWUainM.s:939    .text:0000000000000350 .LVL70
     /tmp/ccWUainM.s:981    .text:0000000000000378 .LVL75
     /tmp/ccWUainM.s:1019   .text:00000000000003a4 .LVL78
     /tmp/ccWUainM.s:1027   .text:00000000000003a8 .LVL79
     /tmp/ccWUainM.s:1063   .text:00000000000003d0 .LVL83
     /tmp/ccWUainM.s:1075   .text:00000000000003d4 .LVL84
     /tmp/ccWUainM.s:325    .text:0000000000000140 .LVL10
     /tmp/ccWUainM.s:1229   .text:00000000000004c8 .LVL102
     /tmp/ccWUainM.s:1240   .text:00000000000004d8 .LVL103
     /tmp/ccWUainM.s:1270   .text:00000000000004e8 .LVL104
     /tmp/ccWUainM.s:1277   .text:00000000000004f0 .LVL105
     /tmp/ccWUainM.s:1300   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccWUainM.s:1162   .text:000000000000045c .LBB47
     /tmp/ccWUainM.s:1258   .text:00000000000004e4 .LBE47
     /tmp/ccWUainM.s:1268   .text:00000000000004e8 .LBB52
     /tmp/ccWUainM.s:1285   .text:00000000000004fc .LBE52
     /tmp/ccWUainM.s:473    .text:00000000000001c4 .LBB63
     /tmp/ccWUainM.s:530    .text:00000000000001fc .LBE63
     /tmp/ccWUainM.s:534    .text:0000000000000200 .LBB64
     /tmp/ccWUainM.s:552    .text:0000000000000210 .LBE64
     /tmp/ccWUainM.s:653    .text:0000000000000260 .LBB72
     /tmp/ccWUainM.s:702    .text:0000000000000284 .LBE72
     /tmp/ccWUainM.s:706    .text:0000000000000288 .LBB73
     /tmp/ccWUainM.s:720    .text:00000000000002a4 .LBE73

UNDEFINED SYMBOLS
_ZN15MemoryAllocator11getInstanceEv
_ZN15MemoryAllocator11MemoryAllocEm
_ZN15MemoryAllocator10MemoryFreeEPv
_ZN9ThreadABI13thread_createEPPS_PFvPvES2_S2_
_ZN9ThreadABI7runningE
_ZN9ThreadABI5yieldEv
_ZN12SchedulerABI20getInstanceSchedulerEv
_ZN12SchedulerABI3putEP9ThreadABI
_ZN12SemaphoreABI10semopenABIEPPS_i
_ZN12SemaphoreABI11semcloseABIEPS_
_ZN12SemaphoreABI10semwaitABIEPS_
_ZN12SemaphoreABI12semsignalABIEPS_
_ZN12SchedulerABI5sleepEm
_ZN14BufferPrinting4boutE
_ZN14BufferPrinting3getEv
_ZN14BufferPrinting3binE
_ZN14BufferPrinting3putEc
plic_claim
CONSOLE_STATUS
plic_complete
GAS LISTING /tmp/ccWUainM.s 			page 53


_ZN14BufferPrinting3outE
_ZN14BufferPrinting2inE
_ZN12SchedulerABI9headsleepE
_ZN9ThreadABI14decrementsleepEv
